/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersInquiry,
    ControllersInquiryFromJSON,
    ControllersInquiryToJSON,
    ControllersInsurance,
    ControllersInsuranceFromJSON,
    ControllersInsuranceToJSON,
    ControllersPayback,
    ControllersPaybackFromJSON,
    ControllersPaybackToJSON,
    ControllersPayment,
    ControllersPaymentFromJSON,
    ControllersPaymentToJSON,
    ControllersProduct,
    ControllersProductFromJSON,
    ControllersProductToJSON,
    ControllersRecordinsurance,
    ControllersRecordinsuranceFromJSON,
    ControllersRecordinsuranceToJSON,
    EntAmountpaid,
    EntAmountpaidFromJSON,
    EntAmountpaidToJSON,
    EntBank,
    EntBankFromJSON,
    EntBankToJSON,
    EntCategory,
    EntCategoryFromJSON,
    EntCategoryToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntGroupOfAge,
    EntGroupOfAgeFromJSON,
    EntGroupOfAgeToJSON,
    EntHospital,
    EntHospitalFromJSON,
    EntHospitalToJSON,
    EntInquiry,
    EntInquiryFromJSON,
    EntInquiryToJSON,
    EntInsurance,
    EntInsuranceFromJSON,
    EntInsuranceToJSON,
    EntMember,
    EntMemberFromJSON,
    EntMemberToJSON,
    EntMoneytransfer,
    EntMoneytransferFromJSON,
    EntMoneytransferToJSON,
    EntOfficer,
    EntOfficerFromJSON,
    EntOfficerToJSON,
    EntPayback,
    EntPaybackFromJSON,
    EntPaybackToJSON,
    EntPayment,
    EntPaymentFromJSON,
    EntPaymentToJSON,
    EntProduct,
    EntProductFromJSON,
    EntProductToJSON,
    EntRecordinsurance,
    EntRecordinsuranceFromJSON,
    EntRecordinsuranceToJSON,
} from '../models';

export interface CreateAmountpaidRequest {
    amountpaid: EntAmountpaid;
}

export interface CreateBankRequest {
    bank: EntBank;
}

export interface CreateCategoryRequest {
    category: EntCategory;
}

export interface CreateGenderRequest {
    gender: EntGender;
}

export interface CreateGroupofageRequest {
    groupofage: EntGroupOfAge;
}

export interface CreateHospitalRequest {
    hospital: EntHospital;
}

export interface CreateInquiryRequest {
    inquiry: ControllersInquiry;
}

export interface CreateInsuranceRequest {
    insurance: ControllersInsurance;
}

export interface CreateMemberRequest {
    member: EntMember;
}

export interface CreateMoneyTransferRequest {
    moneytransfer: EntMoneytransfer;
}

export interface CreateOfficerRequest {
    officer: EntOfficer;
}

export interface CreatePaybackRequest {
    payback: ControllersPayback;
}

export interface CreatePaymentRequest {
    payment: ControllersPayment;
}

export interface CreateProductRequest {
    product: ControllersProduct;
}

export interface CreateRecordinsuranceRequest {
    recordinsurance: ControllersRecordinsurance;
}

export interface DeleteAmountpaidRequest {
    id: number;
}

export interface DeleteBankRequest {
    id: number;
}

export interface DeleteCategoryRequest {
    id: number;
}

export interface DeleteGenderRequest {
    id: number;
}

export interface DeleteGroupofageRequest {
    id: number;
}

export interface DeleteHospitalRequest {
    id: number;
}

export interface DeleteInquiryRequest {
    id: number;
}

export interface DeleteInsuranceRequest {
    id: number;
}

export interface DeleteMemberRequest {
    id: number;
}

export interface DeleteMoneytransferRequest {
    id: number;
}

export interface DeleteOfficerRequest {
    id: number;
}

export interface DeletePaybackRequest {
    id: number;
}

export interface DeletePaymentRequest {
    id: number;
}

export interface DeleteProductRequest {
    id: number;
}

export interface DeleteRecordinsuranceRequest {
    id: number;
}

export interface GetAmountpaidRequest {
    id: number;
}

export interface GetBankRequest {
    id: number;
}

export interface GetCategoryRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetGroupofageRequest {
    id: number;
}

export interface GetHospitalRequest {
    id: number;
}

export interface GetInsuranceRequest {
    id: number;
}

export interface GetMemberRequest {
    id: number;
}

export interface GetMoneytransferRequest {
    id: number;
}

export interface GetOfficerRequest {
    id: number;
}

export interface GetProductRequest {
    id: number;
}

export interface ListAmountpaidRequest {
    limit?: number;
    offset?: number;
}

export interface ListBankRequest {
    limit?: number;
    offset?: number;
}

export interface ListCategoryRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListGroupofageRequest {
    limit?: number;
    offset?: number;
}

export interface ListHospitalRequest {
    limit?: number;
    offset?: number;
}

export interface ListInquiryRequest {
    limit?: number;
    offset?: number;
}

export interface ListInsuranceRequest {
    limit?: number;
    offset?: number;
}

export interface ListMemberRequest {
    limit?: number;
    offset?: number;
}

export interface ListMoneytransferRequest {
    limit?: number;
    offset?: number;
}

export interface ListOfficerRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaybackRequest {
    limit?: number;
    offset?: number;
}

export interface ListPaymentRequest {
    limit?: number;
    offset?: number;
}

export interface ListProductRequest {
    limit?: number;
    offset?: number;
}

export interface ListRecordinsuranceRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAmountpaidRequest {
    id: number;
    amountpaid: EntAmountpaid;
}

export interface UpdateBankRequest {
    id: number;
    bank: EntBank;
}

export interface UpdateCategoryRequest {
    id: number;
    category: EntCategory;
}

export interface UpdateGenderRequest {
    id: number;
    gender: EntGender;
}

export interface UpdateGroupofageRequest {
    id: number;
    groupofage: EntGroupOfAge;
}

export interface UpdateHospitalRequest {
    id: number;
    hospital: EntHospital;
}

export interface UpdateMemberRequest {
    id: number;
    member: EntMember;
}

export interface UpdateMoneytransferRequest {
    id: number;
    moneytransfer: EntMoneytransfer;
}

export interface UpdateOfficerRequest {
    id: number;
    officer: EntOfficer;
}

export interface UpdateProductRequest {
    id: number;
    product: EntProduct;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create amountpaid
     * Create amountpaid
     */
    async createAmountpaidRaw(requestParameters: CreateAmountpaidRequest): Promise<runtime.ApiResponse<EntAmountpaid>> {
        if (requestParameters.amountpaid === null || requestParameters.amountpaid === undefined) {
            throw new runtime.RequiredError('amountpaid','Required parameter requestParameters.amountpaid was null or undefined when calling createAmountpaid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/amountpaids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAmountpaidToJSON(requestParameters.amountpaid),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAmountpaidFromJSON(jsonValue));
    }

    /**
     * Create amountpaid
     * Create amountpaid
     */
    async createAmountpaid(requestParameters: CreateAmountpaidRequest): Promise<EntAmountpaid> {
        const response = await this.createAmountpaidRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bank
     * Create bank
     */
    async createBankRaw(requestParameters: CreateBankRequest): Promise<runtime.ApiResponse<EntBank>> {
        if (requestParameters.bank === null || requestParameters.bank === undefined) {
            throw new runtime.RequiredError('bank','Required parameter requestParameters.bank was null or undefined when calling createBank.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/banks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBankToJSON(requestParameters.bank),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBankFromJSON(jsonValue));
    }

    /**
     * Create bank
     * Create bank
     */
    async createBank(requestParameters: CreateBankRequest): Promise<EntBank> {
        const response = await this.createBankRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create category
     * Create category
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest): Promise<runtime.ApiResponse<EntCategory>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling createCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categorys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCategoryToJSON(requestParameters.category),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCategoryFromJSON(jsonValue));
    }

    /**
     * Create category
     * Create category
     */
    async createCategory(requestParameters: CreateCategoryRequest): Promise<EntCategory> {
        const response = await this.createCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<EntGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create groupofage
     * Create groupofage
     */
    async createGroupofageRaw(requestParameters: CreateGroupofageRequest): Promise<runtime.ApiResponse<EntGroupOfAge>> {
        if (requestParameters.groupofage === null || requestParameters.groupofage === undefined) {
            throw new runtime.RequiredError('groupofage','Required parameter requestParameters.groupofage was null or undefined when calling createGroupofage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groupofages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGroupOfAgeToJSON(requestParameters.groupofage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGroupOfAgeFromJSON(jsonValue));
    }

    /**
     * Create groupofage
     * Create groupofage
     */
    async createGroupofage(requestParameters: CreateGroupofageRequest): Promise<EntGroupOfAge> {
        const response = await this.createGroupofageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create hospital
     * Create hospital
     */
    async createHospitalRaw(requestParameters: CreateHospitalRequest): Promise<runtime.ApiResponse<EntHospital>> {
        if (requestParameters.hospital === null || requestParameters.hospital === undefined) {
            throw new runtime.RequiredError('hospital','Required parameter requestParameters.hospital was null or undefined when calling createHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hospitals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntHospitalToJSON(requestParameters.hospital),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHospitalFromJSON(jsonValue));
    }

    /**
     * Create hospital
     * Create hospital
     */
    async createHospital(requestParameters: CreateHospitalRequest): Promise<EntHospital> {
        const response = await this.createHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create inquiry
     * Create inquiry
     */
    async createInquiryRaw(requestParameters: CreateInquiryRequest): Promise<runtime.ApiResponse<EntInquiry>> {
        if (requestParameters.inquiry === null || requestParameters.inquiry === undefined) {
            throw new runtime.RequiredError('inquiry','Required parameter requestParameters.inquiry was null or undefined when calling createInquiry.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inquirys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersInquiryToJSON(requestParameters.inquiry),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInquiryFromJSON(jsonValue));
    }

    /**
     * Create inquiry
     * Create inquiry
     */
    async createInquiry(requestParameters: CreateInquiryRequest): Promise<EntInquiry> {
        const response = await this.createInquiryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create insurance
     * Create insurance
     */
    async createInsuranceRaw(requestParameters: CreateInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.insurance === null || requestParameters.insurance === undefined) {
            throw new runtime.RequiredError('insurance','Required parameter requestParameters.insurance was null or undefined when calling createInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/insurances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersInsuranceToJSON(requestParameters.insurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * Create insurance
     * Create insurance
     */
    async createInsurance(requestParameters: CreateInsuranceRequest): Promise<EntInsurance> {
        const response = await this.createInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create member
     * Create member
     */
    async createMemberRaw(requestParameters: CreateMemberRequest): Promise<runtime.ApiResponse<EntMember>> {
        if (requestParameters.member === null || requestParameters.member === undefined) {
            throw new runtime.RequiredError('member','Required parameter requestParameters.member was null or undefined when calling createMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMemberToJSON(requestParameters.member),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMemberFromJSON(jsonValue));
    }

    /**
     * Create member
     * Create member
     */
    async createMember(requestParameters: CreateMemberRequest): Promise<EntMember> {
        const response = await this.createMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create moneytransfer
     * Create moneytransfer
     */
    async createMoneyTransferRaw(requestParameters: CreateMoneyTransferRequest): Promise<runtime.ApiResponse<EntMoneytransfer>> {
        if (requestParameters.moneytransfer === null || requestParameters.moneytransfer === undefined) {
            throw new runtime.RequiredError('moneytransfer','Required parameter requestParameters.moneytransfer was null or undefined when calling createMoneyTransfer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/moneytransfers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMoneytransferToJSON(requestParameters.moneytransfer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMoneytransferFromJSON(jsonValue));
    }

    /**
     * Create moneytransfer
     * Create moneytransfer
     */
    async createMoneyTransfer(requestParameters: CreateMoneyTransferRequest): Promise<EntMoneytransfer> {
        const response = await this.createMoneyTransferRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create officer
     * Create officer
     */
    async createOfficerRaw(requestParameters: CreateOfficerRequest): Promise<runtime.ApiResponse<EntOfficer>> {
        if (requestParameters.officer === null || requestParameters.officer === undefined) {
            throw new runtime.RequiredError('officer','Required parameter requestParameters.officer was null or undefined when calling createOfficer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/officers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntOfficerToJSON(requestParameters.officer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficerFromJSON(jsonValue));
    }

    /**
     * Create officer
     * Create officer
     */
    async createOfficer(requestParameters: CreateOfficerRequest): Promise<EntOfficer> {
        const response = await this.createOfficerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create payback
     * Create payback
     */
    async createPaybackRaw(requestParameters: CreatePaybackRequest): Promise<runtime.ApiResponse<EntPayback>> {
        if (requestParameters.payback === null || requestParameters.payback === undefined) {
            throw new runtime.RequiredError('payback','Required parameter requestParameters.payback was null or undefined when calling createPayback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/paybacks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPaybackToJSON(requestParameters.payback),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaybackFromJSON(jsonValue));
    }

    /**
     * Create payback
     * Create payback
     */
    async createPayback(requestParameters: CreatePaybackRequest): Promise<EntPayback> {
        const response = await this.createPaybackRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create payment
     * Create payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest): Promise<runtime.ApiResponse<EntPayment>> {
        if (requestParameters.payment === null || requestParameters.payment === undefined) {
            throw new runtime.RequiredError('payment','Required parameter requestParameters.payment was null or undefined when calling createPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPaymentToJSON(requestParameters.payment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPaymentFromJSON(jsonValue));
    }

    /**
     * Create payment
     * Create payment
     */
    async createPayment(requestParameters: CreatePaymentRequest): Promise<EntPayment> {
        const response = await this.createPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create product
     * Create product
     */
    async createProductRaw(requestParameters: CreateProductRequest): Promise<runtime.ApiResponse<EntProduct>> {
        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling createProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersProductToJSON(requestParameters.product),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProductFromJSON(jsonValue));
    }

    /**
     * Create product
     * Create product
     */
    async createProduct(requestParameters: CreateProductRequest): Promise<EntProduct> {
        const response = await this.createProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create recordinsurance
     * Create recordinsurance
     */
    async createRecordinsuranceRaw(requestParameters: CreateRecordinsuranceRequest): Promise<runtime.ApiResponse<EntRecordinsurance>> {
        if (requestParameters.recordinsurance === null || requestParameters.recordinsurance === undefined) {
            throw new runtime.RequiredError('recordinsurance','Required parameter requestParameters.recordinsurance was null or undefined when calling createRecordinsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/recordinsurances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRecordinsuranceToJSON(requestParameters.recordinsurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRecordinsuranceFromJSON(jsonValue));
    }

    /**
     * Create recordinsurance
     * Create recordinsurance
     */
    async createRecordinsurance(requestParameters: CreateRecordinsuranceRequest): Promise<EntRecordinsurance> {
        const response = await this.createRecordinsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get amountpaid by ID
     * Delete a amountpaid entity by ID
     */
    async deleteAmountpaidRaw(requestParameters: DeleteAmountpaidRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAmountpaid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/amountpaids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get amountpaid by ID
     * Delete a amountpaid entity by ID
     */
    async deleteAmountpaid(requestParameters: DeleteAmountpaidRequest): Promise<object> {
        const response = await this.deleteAmountpaidRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bank by ID
     * Delete a bank entity by ID
     */
    async deleteBankRaw(requestParameters: DeleteBankRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBank.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/banks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bank by ID
     * Delete a bank entity by ID
     */
    async deleteBank(requestParameters: DeleteBankRequest): Promise<object> {
        const response = await this.deleteBankRaw(requestParameters);
        return await response.value();
    }

    /**
     * get category by ID
     * Delete a category entity by ID
     */
    async deleteCategoryRaw(requestParameters: DeleteCategoryRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categorys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get category by ID
     * Delete a category entity by ID
     */
    async deleteCategory(requestParameters: DeleteCategoryRequest): Promise<object> {
        const response = await this.deleteCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGenderRaw(requestParameters: DeleteGenderRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGender(requestParameters: DeleteGenderRequest): Promise<object> {
        const response = await this.deleteGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get groupofage by ID
     * Delete a groupofage entity by ID
     */
    async deleteGroupofageRaw(requestParameters: DeleteGroupofageRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGroupofage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupofages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get groupofage by ID
     * Delete a groupofage entity by ID
     */
    async deleteGroupofage(requestParameters: DeleteGroupofageRequest): Promise<object> {
        const response = await this.deleteGroupofageRaw(requestParameters);
        return await response.value();
    }

    /**
     * get hospital by ID
     * Delete a hospital entity by ID
     */
    async deleteHospitalRaw(requestParameters: DeleteHospitalRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get hospital by ID
     * Delete a hospital entity by ID
     */
    async deleteHospital(requestParameters: DeleteHospitalRequest): Promise<object> {
        const response = await this.deleteHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get inquiry by ID
     * Delete a inquiry entity by ID
     */
    async deleteInquiryRaw(requestParameters: DeleteInquiryRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInquiry.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inquirys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get inquiry by ID
     * Delete a inquiry entity by ID
     */
    async deleteInquiry(requestParameters: DeleteInquiryRequest): Promise<object> {
        const response = await this.deleteInquiryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get insurance by ID
     * Delete a insurance entity by ID
     */
    async deleteInsuranceRaw(requestParameters: DeleteInsuranceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get insurance by ID
     * Delete a insurance entity by ID
     */
    async deleteInsurance(requestParameters: DeleteInsuranceRequest): Promise<object> {
        const response = await this.deleteInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get member by ID
     * Delete a member entity by ID
     */
    async deleteMemberRaw(requestParameters: DeleteMemberRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get member by ID
     * Delete a member entity by ID
     */
    async deleteMember(requestParameters: DeleteMemberRequest): Promise<object> {
        const response = await this.deleteMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get moneytransfer by ID
     * Delete a moneytransfer entity by ID
     */
    async deleteMoneytransferRaw(requestParameters: DeleteMoneytransferRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMoneytransfer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/moneytransfers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get moneytransfer by ID
     * Delete a moneytransfer entity by ID
     */
    async deleteMoneytransfer(requestParameters: DeleteMoneytransferRequest): Promise<object> {
        const response = await this.deleteMoneytransferRaw(requestParameters);
        return await response.value();
    }

    /**
     * get officer by ID
     * Delete a officer entity by ID
     */
    async deleteOfficerRaw(requestParameters: DeleteOfficerRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOfficer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/officers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get officer by ID
     * Delete a officer entity by ID
     */
    async deleteOfficer(requestParameters: DeleteOfficerRequest): Promise<object> {
        const response = await this.deleteOfficerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payback by ID
     * Delete a payback entity by ID
     */
    async deletePaybackRaw(requestParameters: DeletePaybackRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePayback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paybacks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get payback by ID
     * Delete a payback entity by ID
     */
    async deletePayback(requestParameters: DeletePaybackRequest): Promise<object> {
        const response = await this.deletePaybackRaw(requestParameters);
        return await response.value();
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePaymentRaw(requestParameters: DeletePaymentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get payment by ID
     * Delete a payment entity by ID
     */
    async deletePayment(requestParameters: DeletePaymentRequest): Promise<object> {
        const response = await this.deletePaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get product by ID
     * Delete a product entity by ID
     */
    async deleteProductRaw(requestParameters: DeleteProductRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get product by ID
     * Delete a product entity by ID
     */
    async deleteProduct(requestParameters: DeleteProductRequest): Promise<object> {
        const response = await this.deleteProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * get recordinsurance by ID
     * Delete a recordinsurance entity by ID
     */
    async deleteRecordinsuranceRaw(requestParameters: DeleteRecordinsuranceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRecordinsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recordinsurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get recordinsurance by ID
     * Delete a recordinsurance entity by ID
     */
    async deleteRecordinsurance(requestParameters: DeleteRecordinsuranceRequest): Promise<object> {
        const response = await this.deleteRecordinsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get amountpaid by ID
     * Get a amountpaid entity by ID
     */
    async getAmountpaidRaw(requestParameters: GetAmountpaidRequest): Promise<runtime.ApiResponse<EntAmountpaid>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAmountpaid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/amountpaids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAmountpaidFromJSON(jsonValue));
    }

    /**
     * get amountpaid by ID
     * Get a amountpaid entity by ID
     */
    async getAmountpaid(requestParameters: GetAmountpaidRequest): Promise<EntAmountpaid> {
        const response = await this.getAmountpaidRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bank by ID
     * Get a bank entity by ID
     */
    async getBankRaw(requestParameters: GetBankRequest): Promise<runtime.ApiResponse<EntBank>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBank.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/banks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBankFromJSON(jsonValue));
    }

    /**
     * get bank by ID
     * Get a bank entity by ID
     */
    async getBank(requestParameters: GetBankRequest): Promise<EntBank> {
        const response = await this.getBankRaw(requestParameters);
        return await response.value();
    }

    /**
     * get category by ID
     * Get a category entity by ID
     */
    async getCategoryRaw(requestParameters: GetCategoryRequest): Promise<runtime.ApiResponse<EntCategory>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categorys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCategoryFromJSON(jsonValue));
    }

    /**
     * get category by ID
     * Get a category entity by ID
     */
    async getCategory(requestParameters: GetCategoryRequest): Promise<EntCategory> {
        const response = await this.getCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get groupofage by ID
     * Get a groupofage entity by ID
     */
    async getGroupofageRaw(requestParameters: GetGroupofageRequest): Promise<runtime.ApiResponse<EntGroupOfAge>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGroupofage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupofages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGroupOfAgeFromJSON(jsonValue));
    }

    /**
     * get groupofage by ID
     * Get a groupofage entity by ID
     */
    async getGroupofage(requestParameters: GetGroupofageRequest): Promise<EntGroupOfAge> {
        const response = await this.getGroupofageRaw(requestParameters);
        return await response.value();
    }

    /**
     * get hospital by ID
     * Get a hospital entity by ID
     */
    async getHospitalRaw(requestParameters: GetHospitalRequest): Promise<runtime.ApiResponse<EntHospital>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHospitalFromJSON(jsonValue));
    }

    /**
     * get hospital by ID
     * Get a hospital entity by ID
     */
    async getHospital(requestParameters: GetHospitalRequest): Promise<EntHospital> {
        const response = await this.getHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get insurance by ID
     * Get a insurance entity by ID
     */
    async getInsuranceRaw(requestParameters: GetInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * get insurance by ID
     * Get a insurance entity by ID
     */
    async getInsurance(requestParameters: GetInsuranceRequest): Promise<EntInsurance> {
        const response = await this.getInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get member by ID
     * Get a member entity by ID
     */
    async getMemberRaw(requestParameters: GetMemberRequest): Promise<runtime.ApiResponse<EntMember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMemberFromJSON(jsonValue));
    }

    /**
     * get member by ID
     * Get a member entity by ID
     */
    async getMember(requestParameters: GetMemberRequest): Promise<EntMember> {
        const response = await this.getMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * get moneytransfer by ID
     * Get a moneytransfer entity by ID
     */
    async getMoneytransferRaw(requestParameters: GetMoneytransferRequest): Promise<runtime.ApiResponse<EntMoneytransfer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMoneytransfer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/moneytransfers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMoneytransferFromJSON(jsonValue));
    }

    /**
     * get moneytransfer by ID
     * Get a moneytransfer entity by ID
     */
    async getMoneytransfer(requestParameters: GetMoneytransferRequest): Promise<EntMoneytransfer> {
        const response = await this.getMoneytransferRaw(requestParameters);
        return await response.value();
    }

    /**
     * get officer by ID
     * Get a officer entity by ID
     */
    async getOfficerRaw(requestParameters: GetOfficerRequest): Promise<runtime.ApiResponse<EntOfficer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOfficer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/officers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficerFromJSON(jsonValue));
    }

    /**
     * get officer by ID
     * Get a officer entity by ID
     */
    async getOfficer(requestParameters: GetOfficerRequest): Promise<EntOfficer> {
        const response = await this.getOfficerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get product by ID
     * Get a product entity by ID
     */
    async getProductRaw(requestParameters: GetProductRequest): Promise<runtime.ApiResponse<EntProduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProductFromJSON(jsonValue));
    }

    /**
     * get product by ID
     * Get a product entity by ID
     */
    async getProduct(requestParameters: GetProductRequest): Promise<EntProduct> {
        const response = await this.getProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list amountpaid entities
     * List amountpaid entities
     */
    async listAmountpaidRaw(requestParameters: ListAmountpaidRequest): Promise<runtime.ApiResponse<Array<EntAmountpaid>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/amountpaids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAmountpaidFromJSON));
    }

    /**
     * list amountpaid entities
     * List amountpaid entities
     */
    async listAmountpaid(requestParameters: ListAmountpaidRequest): Promise<Array<EntAmountpaid>> {
        const response = await this.listAmountpaidRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bank entities
     * List bank entities
     */
    async listBankRaw(requestParameters: ListBankRequest): Promise<runtime.ApiResponse<Array<EntBank>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/banks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBankFromJSON));
    }

    /**
     * list bank entities
     * List bank entities
     */
    async listBank(requestParameters: ListBankRequest): Promise<Array<EntBank>> {
        const response = await this.listBankRaw(requestParameters);
        return await response.value();
    }

    /**
     * list category entities
     * List category entities
     */
    async listCategoryRaw(requestParameters: ListCategoryRequest): Promise<runtime.ApiResponse<Array<EntCategory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categorys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCategoryFromJSON));
    }

    /**
     * list category entities
     * List category entities
     */
    async listCategory(requestParameters: ListCategoryRequest): Promise<Array<EntCategory>> {
        const response = await this.listCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list groupofage entities
     * List groupofage entities
     */
    async listGroupofageRaw(requestParameters: ListGroupofageRequest): Promise<runtime.ApiResponse<Array<EntGroupOfAge>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupofages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGroupOfAgeFromJSON));
    }

    /**
     * list groupofage entities
     * List groupofage entities
     */
    async listGroupofage(requestParameters: ListGroupofageRequest): Promise<Array<EntGroupOfAge>> {
        const response = await this.listGroupofageRaw(requestParameters);
        return await response.value();
    }

    /**
     * list hospital entities
     * List hospital entities
     */
    async listHospitalRaw(requestParameters: ListHospitalRequest): Promise<runtime.ApiResponse<Array<EntHospital>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntHospitalFromJSON));
    }

    /**
     * list hospital entities
     * List hospital entities
     */
    async listHospital(requestParameters: ListHospitalRequest): Promise<Array<EntHospital>> {
        const response = await this.listHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * list inquiry entities
     * List inquiry entities
     */
    async listInquiryRaw(requestParameters: ListInquiryRequest): Promise<runtime.ApiResponse<Array<EntInquiry>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inquirys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInquiryFromJSON));
    }

    /**
     * list inquiry entities
     * List inquiry entities
     */
    async listInquiry(requestParameters: ListInquiryRequest): Promise<Array<EntInquiry>> {
        const response = await this.listInquiryRaw(requestParameters);
        return await response.value();
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsuranceRaw(requestParameters: ListInsuranceRequest): Promise<runtime.ApiResponse<Array<EntInsurance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInsuranceFromJSON));
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsurance(requestParameters: ListInsuranceRequest): Promise<Array<EntInsurance>> {
        const response = await this.listInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list member entities
     * List member entities
     */
    async listMemberRaw(requestParameters: ListMemberRequest): Promise<runtime.ApiResponse<Array<EntMember>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMemberFromJSON));
    }

    /**
     * list member entities
     * List member entities
     */
    async listMember(requestParameters: ListMemberRequest): Promise<Array<EntMember>> {
        const response = await this.listMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * list moneytransfer entities
     * List moneytransfer entities
     */
    async listMoneytransferRaw(requestParameters: ListMoneytransferRequest): Promise<runtime.ApiResponse<Array<EntMoneytransfer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/moneytransfers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMoneytransferFromJSON));
    }

    /**
     * list moneytransfer entities
     * List moneytransfer entities
     */
    async listMoneytransfer(requestParameters: ListMoneytransferRequest): Promise<Array<EntMoneytransfer>> {
        const response = await this.listMoneytransferRaw(requestParameters);
        return await response.value();
    }

    /**
     * list officer entities
     * List officer entities
     */
    async listOfficerRaw(requestParameters: ListOfficerRequest): Promise<runtime.ApiResponse<Array<EntOfficer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/officers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntOfficerFromJSON));
    }

    /**
     * list officer entities
     * List officer entities
     */
    async listOfficer(requestParameters: ListOfficerRequest): Promise<Array<EntOfficer>> {
        const response = await this.listOfficerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list payback entities
     * List payback entities
     */
    async listPaybackRaw(requestParameters: ListPaybackRequest): Promise<runtime.ApiResponse<Array<EntPayback>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paybacks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaybackFromJSON));
    }

    /**
     * list payback entities
     * List payback entities
     */
    async listPayback(requestParameters: ListPaybackRequest): Promise<Array<EntPayback>> {
        const response = await this.listPaybackRaw(requestParameters);
        return await response.value();
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPaymentRaw(requestParameters: ListPaymentRequest): Promise<runtime.ApiResponse<Array<EntPayment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/payments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPaymentFromJSON));
    }

    /**
     * list payment entities
     * List payment entities
     */
    async listPayment(requestParameters: ListPaymentRequest): Promise<Array<EntPayment>> {
        const response = await this.listPaymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list product entities
     * List product entities
     */
    async listProductRaw(requestParameters: ListProductRequest): Promise<runtime.ApiResponse<Array<EntProduct>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProductFromJSON));
    }

    /**
     * list product entities
     * List product entities
     */
    async listProduct(requestParameters: ListProductRequest): Promise<Array<EntProduct>> {
        const response = await this.listProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * list recordinsurance entities
     * List recordinsurance entities
     */
    async listRecordinsuranceRaw(requestParameters: ListRecordinsuranceRequest): Promise<runtime.ApiResponse<Array<EntRecordinsurance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recordinsurances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRecordinsuranceFromJSON));
    }

    /**
     * list recordinsurance entities
     * List recordinsurance entities
     */
    async listRecordinsurance(requestParameters: ListRecordinsuranceRequest): Promise<Array<EntRecordinsurance>> {
        const response = await this.listRecordinsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * update amountpaid by ID
     * Update a amountpaid entity by ID
     */
    async updateAmountpaidRaw(requestParameters: UpdateAmountpaidRequest): Promise<runtime.ApiResponse<EntAmountpaid>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAmountpaid.');
        }

        if (requestParameters.amountpaid === null || requestParameters.amountpaid === undefined) {
            throw new runtime.RequiredError('amountpaid','Required parameter requestParameters.amountpaid was null or undefined when calling updateAmountpaid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/amountpaids/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAmountpaidToJSON(requestParameters.amountpaid),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAmountpaidFromJSON(jsonValue));
    }

    /**
     * update amountpaid by ID
     * Update a amountpaid entity by ID
     */
    async updateAmountpaid(requestParameters: UpdateAmountpaidRequest): Promise<EntAmountpaid> {
        const response = await this.updateAmountpaidRaw(requestParameters);
        return await response.value();
    }

    /**
     * update bank by ID
     * Update a bank entity by ID
     */
    async updateBankRaw(requestParameters: UpdateBankRequest): Promise<runtime.ApiResponse<EntBank>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBank.');
        }

        if (requestParameters.bank === null || requestParameters.bank === undefined) {
            throw new runtime.RequiredError('bank','Required parameter requestParameters.bank was null or undefined when calling updateBank.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/banks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBankToJSON(requestParameters.bank),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBankFromJSON(jsonValue));
    }

    /**
     * update bank by ID
     * Update a bank entity by ID
     */
    async updateBank(requestParameters: UpdateBankRequest): Promise<EntBank> {
        const response = await this.updateBankRaw(requestParameters);
        return await response.value();
    }

    /**
     * update category by ID
     * Update a category entity by ID
     */
    async updateCategoryRaw(requestParameters: UpdateCategoryRequest): Promise<runtime.ApiResponse<EntCategory>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCategory.');
        }

        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling updateCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categorys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCategoryToJSON(requestParameters.category),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCategoryFromJSON(jsonValue));
    }

    /**
     * update category by ID
     * Update a category entity by ID
     */
    async updateCategory(requestParameters: UpdateCategoryRequest): Promise<EntCategory> {
        const response = await this.updateCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGenderRaw(requestParameters: UpdateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGender.');
        }

        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling updateGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGender(requestParameters: UpdateGenderRequest): Promise<EntGender> {
        const response = await this.updateGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * update groupofage by ID
     * Update a groupofage entity by ID
     */
    async updateGroupofageRaw(requestParameters: UpdateGroupofageRequest): Promise<runtime.ApiResponse<EntGroupOfAge>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGroupofage.');
        }

        if (requestParameters.groupofage === null || requestParameters.groupofage === undefined) {
            throw new runtime.RequiredError('groupofage','Required parameter requestParameters.groupofage was null or undefined when calling updateGroupofage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groupofages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntGroupOfAgeToJSON(requestParameters.groupofage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGroupOfAgeFromJSON(jsonValue));
    }

    /**
     * update groupofage by ID
     * Update a groupofage entity by ID
     */
    async updateGroupofage(requestParameters: UpdateGroupofageRequest): Promise<EntGroupOfAge> {
        const response = await this.updateGroupofageRaw(requestParameters);
        return await response.value();
    }

    /**
     * update hospital by ID
     * Update a hospital entity by ID
     */
    async updateHospitalRaw(requestParameters: UpdateHospitalRequest): Promise<runtime.ApiResponse<EntHospital>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateHospital.');
        }

        if (requestParameters.hospital === null || requestParameters.hospital === undefined) {
            throw new runtime.RequiredError('hospital','Required parameter requestParameters.hospital was null or undefined when calling updateHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntHospitalToJSON(requestParameters.hospital),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHospitalFromJSON(jsonValue));
    }

    /**
     * update hospital by ID
     * Update a hospital entity by ID
     */
    async updateHospital(requestParameters: UpdateHospitalRequest): Promise<EntHospital> {
        const response = await this.updateHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * update member by ID
     * Update a member entity by ID
     */
    async updateMemberRaw(requestParameters: UpdateMemberRequest): Promise<runtime.ApiResponse<EntMember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMember.');
        }

        if (requestParameters.member === null || requestParameters.member === undefined) {
            throw new runtime.RequiredError('member','Required parameter requestParameters.member was null or undefined when calling updateMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/members/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMemberToJSON(requestParameters.member),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMemberFromJSON(jsonValue));
    }

    /**
     * update member by ID
     * Update a member entity by ID
     */
    async updateMember(requestParameters: UpdateMemberRequest): Promise<EntMember> {
        const response = await this.updateMemberRaw(requestParameters);
        return await response.value();
    }

    /**
     * update moneytransfer by ID
     * Update a moneytransfer entity by ID
     */
    async updateMoneytransferRaw(requestParameters: UpdateMoneytransferRequest): Promise<runtime.ApiResponse<EntMoneytransfer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMoneytransfer.');
        }

        if (requestParameters.moneytransfer === null || requestParameters.moneytransfer === undefined) {
            throw new runtime.RequiredError('moneytransfer','Required parameter requestParameters.moneytransfer was null or undefined when calling updateMoneytransfer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/moneytransfers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMoneytransferToJSON(requestParameters.moneytransfer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMoneytransferFromJSON(jsonValue));
    }

    /**
     * update moneytransfer by ID
     * Update a moneytransfer entity by ID
     */
    async updateMoneytransfer(requestParameters: UpdateMoneytransferRequest): Promise<EntMoneytransfer> {
        const response = await this.updateMoneytransferRaw(requestParameters);
        return await response.value();
    }

    /**
     * update officer by ID
     * Update a officer entity by ID
     */
    async updateOfficerRaw(requestParameters: UpdateOfficerRequest): Promise<runtime.ApiResponse<EntOfficer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOfficer.');
        }

        if (requestParameters.officer === null || requestParameters.officer === undefined) {
            throw new runtime.RequiredError('officer','Required parameter requestParameters.officer was null or undefined when calling updateOfficer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/officers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntOfficerToJSON(requestParameters.officer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntOfficerFromJSON(jsonValue));
    }

    /**
     * update officer by ID
     * Update a officer entity by ID
     */
    async updateOfficer(requestParameters: UpdateOfficerRequest): Promise<EntOfficer> {
        const response = await this.updateOfficerRaw(requestParameters);
        return await response.value();
    }

    /**
     * update product by ID
     * Update a product entity by ID
     */
    async updateProductRaw(requestParameters: UpdateProductRequest): Promise<runtime.ApiResponse<EntProduct>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProduct.');
        }

        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling updateProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntProductToJSON(requestParameters.product),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProductFromJSON(jsonValue));
    }

    /**
     * update product by ID
     * Update a product entity by ID
     */
    async updateProduct(requestParameters: UpdateProductRequest): Promise<EntProduct> {
        const response = await this.updateProductRaw(requestParameters);
        return await response.value();
    }

}
