// Code generated by entc, DO NOT EDIT.

package groupofage

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team05/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GroupOfAgeName applies equality check predicate on the "group_of_age_name" field. It's identical to GroupOfAgeNameEQ.
func GroupOfAgeName(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeAge applies equality check predicate on the "group_of_age_age" field. It's identical to GroupOfAgeAgeEQ.
func GroupOfAgeAge(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeNameEQ applies the EQ predicate on the "group_of_age_name" field.
func GroupOfAgeNameEQ(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameNEQ applies the NEQ predicate on the "group_of_age_name" field.
func GroupOfAgeNameNEQ(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameIn applies the In predicate on the "group_of_age_name" field.
func GroupOfAgeNameIn(vs ...string) predicate.GroupOfAge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupOfAge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupOfAgeName), v...))
	})
}

// GroupOfAgeNameNotIn applies the NotIn predicate on the "group_of_age_name" field.
func GroupOfAgeNameNotIn(vs ...string) predicate.GroupOfAge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupOfAge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupOfAgeName), v...))
	})
}

// GroupOfAgeNameGT applies the GT predicate on the "group_of_age_name" field.
func GroupOfAgeNameGT(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameGTE applies the GTE predicate on the "group_of_age_name" field.
func GroupOfAgeNameGTE(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameLT applies the LT predicate on the "group_of_age_name" field.
func GroupOfAgeNameLT(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameLTE applies the LTE predicate on the "group_of_age_name" field.
func GroupOfAgeNameLTE(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameContains applies the Contains predicate on the "group_of_age_name" field.
func GroupOfAgeNameContains(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameHasPrefix applies the HasPrefix predicate on the "group_of_age_name" field.
func GroupOfAgeNameHasPrefix(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameHasSuffix applies the HasSuffix predicate on the "group_of_age_name" field.
func GroupOfAgeNameHasSuffix(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameEqualFold applies the EqualFold predicate on the "group_of_age_name" field.
func GroupOfAgeNameEqualFold(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeNameContainsFold applies the ContainsFold predicate on the "group_of_age_name" field.
func GroupOfAgeNameContainsFold(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupOfAgeName), v))
	})
}

// GroupOfAgeAgeEQ applies the EQ predicate on the "group_of_age_age" field.
func GroupOfAgeAgeEQ(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeNEQ applies the NEQ predicate on the "group_of_age_age" field.
func GroupOfAgeAgeNEQ(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeIn applies the In predicate on the "group_of_age_age" field.
func GroupOfAgeAgeIn(vs ...string) predicate.GroupOfAge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupOfAge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGroupOfAgeAge), v...))
	})
}

// GroupOfAgeAgeNotIn applies the NotIn predicate on the "group_of_age_age" field.
func GroupOfAgeAgeNotIn(vs ...string) predicate.GroupOfAge {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupOfAge(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGroupOfAgeAge), v...))
	})
}

// GroupOfAgeAgeGT applies the GT predicate on the "group_of_age_age" field.
func GroupOfAgeAgeGT(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeGTE applies the GTE predicate on the "group_of_age_age" field.
func GroupOfAgeAgeGTE(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeLT applies the LT predicate on the "group_of_age_age" field.
func GroupOfAgeAgeLT(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeLTE applies the LTE predicate on the "group_of_age_age" field.
func GroupOfAgeAgeLTE(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeContains applies the Contains predicate on the "group_of_age_age" field.
func GroupOfAgeAgeContains(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeHasPrefix applies the HasPrefix predicate on the "group_of_age_age" field.
func GroupOfAgeAgeHasPrefix(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeHasSuffix applies the HasSuffix predicate on the "group_of_age_age" field.
func GroupOfAgeAgeHasSuffix(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeEqualFold applies the EqualFold predicate on the "group_of_age_age" field.
func GroupOfAgeAgeEqualFold(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGroupOfAgeAge), v))
	})
}

// GroupOfAgeAgeContainsFold applies the ContainsFold predicate on the "group_of_age_age" field.
func GroupOfAgeAgeContainsFold(v string) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGroupOfAgeAge), v))
	})
}

// HasGroupofageProduct applies the HasEdge predicate on the "groupofage_product" edge.
func HasGroupofageProduct() predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupofageProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupofageProductTable, GroupofageProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupofageProductWith applies the HasEdge predicate on the "groupofage_product" edge with a given conditions (other predicates).
func HasGroupofageProductWith(preds ...predicate.Product) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupofageProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupofageProductTable, GroupofageProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.GroupOfAge) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.GroupOfAge) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupOfAge) predicate.GroupOfAge {
	return predicate.GroupOfAge(func(s *sql.Selector) {
		p(s.Not())
	})
}
