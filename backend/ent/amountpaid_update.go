// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/amountpaid"
	"github.com/sut63/team05/ent/predicate"
	"github.com/sut63/team05/ent/recordinsurance"
)

// AmountpaidUpdate is the builder for updating Amountpaid entities.
type AmountpaidUpdate struct {
	config
	hooks      []Hook
	mutation   *AmountpaidMutation
	predicates []predicate.Amountpaid
}

// Where adds a new predicate for the builder.
func (au *AmountpaidUpdate) Where(ps ...predicate.Amountpaid) *AmountpaidUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetAmountpaidMoney sets the amountpaid_money field.
func (au *AmountpaidUpdate) SetAmountpaidMoney(f float64) *AmountpaidUpdate {
	au.mutation.ResetAmountpaidMoney()
	au.mutation.SetAmountpaidMoney(f)
	return au
}

// AddAmountpaidMoney adds f to amountpaid_money.
func (au *AmountpaidUpdate) AddAmountpaidMoney(f float64) *AmountpaidUpdate {
	au.mutation.AddAmountpaidMoney(f)
	return au
}

// AddAmountpaidRecordinsuranceIDs adds the amountpaid_recordinsurance edge to Recordinsurance by ids.
func (au *AmountpaidUpdate) AddAmountpaidRecordinsuranceIDs(ids ...int) *AmountpaidUpdate {
	au.mutation.AddAmountpaidRecordinsuranceIDs(ids...)
	return au
}

// AddAmountpaidRecordinsurance adds the amountpaid_recordinsurance edges to Recordinsurance.
func (au *AmountpaidUpdate) AddAmountpaidRecordinsurance(r ...*Recordinsurance) *AmountpaidUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddAmountpaidRecordinsuranceIDs(ids...)
}

// Mutation returns the AmountpaidMutation object of the builder.
func (au *AmountpaidUpdate) Mutation() *AmountpaidMutation {
	return au.mutation
}

// RemoveAmountpaidRecordinsuranceIDs removes the amountpaid_recordinsurance edge to Recordinsurance by ids.
func (au *AmountpaidUpdate) RemoveAmountpaidRecordinsuranceIDs(ids ...int) *AmountpaidUpdate {
	au.mutation.RemoveAmountpaidRecordinsuranceIDs(ids...)
	return au
}

// RemoveAmountpaidRecordinsurance removes amountpaid_recordinsurance edges to Recordinsurance.
func (au *AmountpaidUpdate) RemoveAmountpaidRecordinsurance(r ...*Recordinsurance) *AmountpaidUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveAmountpaidRecordinsuranceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AmountpaidUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmountpaidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AmountpaidUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AmountpaidUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AmountpaidUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AmountpaidUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   amountpaid.Table,
			Columns: amountpaid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: amountpaid.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.AmountpaidMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: amountpaid.FieldAmountpaidMoney,
		})
	}
	if value, ok := au.mutation.AddedAmountpaidMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: amountpaid.FieldAmountpaidMoney,
		})
	}
	if nodes := au.mutation.RemovedAmountpaidRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   amountpaid.AmountpaidRecordinsuranceTable,
			Columns: []string{amountpaid.AmountpaidRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AmountpaidRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   amountpaid.AmountpaidRecordinsuranceTable,
			Columns: []string{amountpaid.AmountpaidRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amountpaid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AmountpaidUpdateOne is the builder for updating a single Amountpaid entity.
type AmountpaidUpdateOne struct {
	config
	hooks    []Hook
	mutation *AmountpaidMutation
}

// SetAmountpaidMoney sets the amountpaid_money field.
func (auo *AmountpaidUpdateOne) SetAmountpaidMoney(f float64) *AmountpaidUpdateOne {
	auo.mutation.ResetAmountpaidMoney()
	auo.mutation.SetAmountpaidMoney(f)
	return auo
}

// AddAmountpaidMoney adds f to amountpaid_money.
func (auo *AmountpaidUpdateOne) AddAmountpaidMoney(f float64) *AmountpaidUpdateOne {
	auo.mutation.AddAmountpaidMoney(f)
	return auo
}

// AddAmountpaidRecordinsuranceIDs adds the amountpaid_recordinsurance edge to Recordinsurance by ids.
func (auo *AmountpaidUpdateOne) AddAmountpaidRecordinsuranceIDs(ids ...int) *AmountpaidUpdateOne {
	auo.mutation.AddAmountpaidRecordinsuranceIDs(ids...)
	return auo
}

// AddAmountpaidRecordinsurance adds the amountpaid_recordinsurance edges to Recordinsurance.
func (auo *AmountpaidUpdateOne) AddAmountpaidRecordinsurance(r ...*Recordinsurance) *AmountpaidUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddAmountpaidRecordinsuranceIDs(ids...)
}

// Mutation returns the AmountpaidMutation object of the builder.
func (auo *AmountpaidUpdateOne) Mutation() *AmountpaidMutation {
	return auo.mutation
}

// RemoveAmountpaidRecordinsuranceIDs removes the amountpaid_recordinsurance edge to Recordinsurance by ids.
func (auo *AmountpaidUpdateOne) RemoveAmountpaidRecordinsuranceIDs(ids ...int) *AmountpaidUpdateOne {
	auo.mutation.RemoveAmountpaidRecordinsuranceIDs(ids...)
	return auo
}

// RemoveAmountpaidRecordinsurance removes amountpaid_recordinsurance edges to Recordinsurance.
func (auo *AmountpaidUpdateOne) RemoveAmountpaidRecordinsurance(r ...*Recordinsurance) *AmountpaidUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveAmountpaidRecordinsuranceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (auo *AmountpaidUpdateOne) Save(ctx context.Context) (*Amountpaid, error) {

	var (
		err  error
		node *Amountpaid
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmountpaidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AmountpaidUpdateOne) SaveX(ctx context.Context) *Amountpaid {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AmountpaidUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AmountpaidUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AmountpaidUpdateOne) sqlSave(ctx context.Context) (a *Amountpaid, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   amountpaid.Table,
			Columns: amountpaid.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: amountpaid.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Amountpaid.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.AmountpaidMoney(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: amountpaid.FieldAmountpaidMoney,
		})
	}
	if value, ok := auo.mutation.AddedAmountpaidMoney(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: amountpaid.FieldAmountpaidMoney,
		})
	}
	if nodes := auo.mutation.RemovedAmountpaidRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   amountpaid.AmountpaidRecordinsuranceTable,
			Columns: []string{amountpaid.AmountpaidRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AmountpaidRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   amountpaid.AmountpaidRecordinsuranceTable,
			Columns: []string{amountpaid.AmountpaidRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Amountpaid{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amountpaid.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
