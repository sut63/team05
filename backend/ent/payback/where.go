// Code generated by entc, DO NOT EDIT.

package payback

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team05/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PaybackTransfertime applies equality check predicate on the "payback_transfertime" field. It's identical to PaybackTransfertimeEQ.
func PaybackTransfertime(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackTransfertime), v))
	})
}

// PaybackAccountnumber applies equality check predicate on the "payback_accountnumber" field. It's identical to PaybackAccountnumberEQ.
func PaybackAccountnumber(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountname applies equality check predicate on the "payback_accountname" field. It's identical to PaybackAccountnameEQ.
func PaybackAccountname(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountiden applies equality check predicate on the "payback_accountiden" field. It's identical to PaybackAccountidenEQ.
func PaybackAccountiden(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackTransfertimeEQ applies the EQ predicate on the "payback_transfertime" field.
func PaybackTransfertimeEQ(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackTransfertime), v))
	})
}

// PaybackTransfertimeNEQ applies the NEQ predicate on the "payback_transfertime" field.
func PaybackTransfertimeNEQ(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaybackTransfertime), v))
	})
}

// PaybackTransfertimeIn applies the In predicate on the "payback_transfertime" field.
func PaybackTransfertimeIn(vs ...time.Time) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaybackTransfertime), v...))
	})
}

// PaybackTransfertimeNotIn applies the NotIn predicate on the "payback_transfertime" field.
func PaybackTransfertimeNotIn(vs ...time.Time) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaybackTransfertime), v...))
	})
}

// PaybackTransfertimeGT applies the GT predicate on the "payback_transfertime" field.
func PaybackTransfertimeGT(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaybackTransfertime), v))
	})
}

// PaybackTransfertimeGTE applies the GTE predicate on the "payback_transfertime" field.
func PaybackTransfertimeGTE(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaybackTransfertime), v))
	})
}

// PaybackTransfertimeLT applies the LT predicate on the "payback_transfertime" field.
func PaybackTransfertimeLT(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaybackTransfertime), v))
	})
}

// PaybackTransfertimeLTE applies the LTE predicate on the "payback_transfertime" field.
func PaybackTransfertimeLTE(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaybackTransfertime), v))
	})
}

// PaybackAccountnumberEQ applies the EQ predicate on the "payback_accountnumber" field.
func PaybackAccountnumberEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberNEQ applies the NEQ predicate on the "payback_accountnumber" field.
func PaybackAccountnumberNEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberIn applies the In predicate on the "payback_accountnumber" field.
func PaybackAccountnumberIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaybackAccountnumber), v...))
	})
}

// PaybackAccountnumberNotIn applies the NotIn predicate on the "payback_accountnumber" field.
func PaybackAccountnumberNotIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaybackAccountnumber), v...))
	})
}

// PaybackAccountnumberGT applies the GT predicate on the "payback_accountnumber" field.
func PaybackAccountnumberGT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberGTE applies the GTE predicate on the "payback_accountnumber" field.
func PaybackAccountnumberGTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberLT applies the LT predicate on the "payback_accountnumber" field.
func PaybackAccountnumberLT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberLTE applies the LTE predicate on the "payback_accountnumber" field.
func PaybackAccountnumberLTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberContains applies the Contains predicate on the "payback_accountnumber" field.
func PaybackAccountnumberContains(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberHasPrefix applies the HasPrefix predicate on the "payback_accountnumber" field.
func PaybackAccountnumberHasPrefix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberHasSuffix applies the HasSuffix predicate on the "payback_accountnumber" field.
func PaybackAccountnumberHasSuffix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberEqualFold applies the EqualFold predicate on the "payback_accountnumber" field.
func PaybackAccountnumberEqualFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnumberContainsFold applies the ContainsFold predicate on the "payback_accountnumber" field.
func PaybackAccountnumberContainsFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaybackAccountnumber), v))
	})
}

// PaybackAccountnameEQ applies the EQ predicate on the "payback_accountname" field.
func PaybackAccountnameEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameNEQ applies the NEQ predicate on the "payback_accountname" field.
func PaybackAccountnameNEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameIn applies the In predicate on the "payback_accountname" field.
func PaybackAccountnameIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaybackAccountname), v...))
	})
}

// PaybackAccountnameNotIn applies the NotIn predicate on the "payback_accountname" field.
func PaybackAccountnameNotIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaybackAccountname), v...))
	})
}

// PaybackAccountnameGT applies the GT predicate on the "payback_accountname" field.
func PaybackAccountnameGT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameGTE applies the GTE predicate on the "payback_accountname" field.
func PaybackAccountnameGTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameLT applies the LT predicate on the "payback_accountname" field.
func PaybackAccountnameLT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameLTE applies the LTE predicate on the "payback_accountname" field.
func PaybackAccountnameLTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameContains applies the Contains predicate on the "payback_accountname" field.
func PaybackAccountnameContains(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameHasPrefix applies the HasPrefix predicate on the "payback_accountname" field.
func PaybackAccountnameHasPrefix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameHasSuffix applies the HasSuffix predicate on the "payback_accountname" field.
func PaybackAccountnameHasSuffix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameEqualFold applies the EqualFold predicate on the "payback_accountname" field.
func PaybackAccountnameEqualFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountnameContainsFold applies the ContainsFold predicate on the "payback_accountname" field.
func PaybackAccountnameContainsFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaybackAccountname), v))
	})
}

// PaybackAccountidenEQ applies the EQ predicate on the "payback_accountiden" field.
func PaybackAccountidenEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenNEQ applies the NEQ predicate on the "payback_accountiden" field.
func PaybackAccountidenNEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenIn applies the In predicate on the "payback_accountiden" field.
func PaybackAccountidenIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaybackAccountiden), v...))
	})
}

// PaybackAccountidenNotIn applies the NotIn predicate on the "payback_accountiden" field.
func PaybackAccountidenNotIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaybackAccountiden), v...))
	})
}

// PaybackAccountidenGT applies the GT predicate on the "payback_accountiden" field.
func PaybackAccountidenGT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenGTE applies the GTE predicate on the "payback_accountiden" field.
func PaybackAccountidenGTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenLT applies the LT predicate on the "payback_accountiden" field.
func PaybackAccountidenLT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenLTE applies the LTE predicate on the "payback_accountiden" field.
func PaybackAccountidenLTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenContains applies the Contains predicate on the "payback_accountiden" field.
func PaybackAccountidenContains(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenHasPrefix applies the HasPrefix predicate on the "payback_accountiden" field.
func PaybackAccountidenHasPrefix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenHasSuffix applies the HasSuffix predicate on the "payback_accountiden" field.
func PaybackAccountidenHasSuffix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenEqualFold applies the EqualFold predicate on the "payback_accountiden" field.
func PaybackAccountidenEqualFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPaybackAccountiden), v))
	})
}

// PaybackAccountidenContainsFold applies the ContainsFold predicate on the "payback_accountiden" field.
func PaybackAccountidenContainsFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPaybackAccountiden), v))
	})
}

// HasOfficer applies the HasEdge predicate on the "Officer" edge.
func HasOfficer() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOfficerWith applies the HasEdge predicate on the "Officer" edge with a given conditions (other predicates).
func HasOfficerWith(preds ...predicate.Officer) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMember applies the HasEdge predicate on the "Member" edge.
func HasMember() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "Member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "Product" edge.
func HasProduct() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "Product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBank applies the HasEdge predicate on the "Bank" edge.
func HasBank() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBankWith applies the HasEdge predicate on the "Bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.Bank) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Payback) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Payback) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Payback) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		p(s.Not())
	})
}
