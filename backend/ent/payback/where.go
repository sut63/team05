// Code generated by entc, DO NOT EDIT.

package payback

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team05/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Accountnumber applies equality check predicate on the "Accountnumber" field. It's identical to AccountnumberEQ.
func Accountnumber(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountnumber), v))
	})
}

// Transfertime applies equality check predicate on the "Transfertime" field. It's identical to TransfertimeEQ.
func Transfertime(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransfertime), v))
	})
}

// AccountnumberEQ applies the EQ predicate on the "Accountnumber" field.
func AccountnumberEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberNEQ applies the NEQ predicate on the "Accountnumber" field.
func AccountnumberNEQ(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberIn applies the In predicate on the "Accountnumber" field.
func AccountnumberIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountnumber), v...))
	})
}

// AccountnumberNotIn applies the NotIn predicate on the "Accountnumber" field.
func AccountnumberNotIn(vs ...string) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountnumber), v...))
	})
}

// AccountnumberGT applies the GT predicate on the "Accountnumber" field.
func AccountnumberGT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberGTE applies the GTE predicate on the "Accountnumber" field.
func AccountnumberGTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberLT applies the LT predicate on the "Accountnumber" field.
func AccountnumberLT(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberLTE applies the LTE predicate on the "Accountnumber" field.
func AccountnumberLTE(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberContains applies the Contains predicate on the "Accountnumber" field.
func AccountnumberContains(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberHasPrefix applies the HasPrefix predicate on the "Accountnumber" field.
func AccountnumberHasPrefix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberHasSuffix applies the HasSuffix predicate on the "Accountnumber" field.
func AccountnumberHasSuffix(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberEqualFold applies the EqualFold predicate on the "Accountnumber" field.
func AccountnumberEqualFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountnumber), v))
	})
}

// AccountnumberContainsFold applies the ContainsFold predicate on the "Accountnumber" field.
func AccountnumberContainsFold(v string) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountnumber), v))
	})
}

// TransfertimeEQ applies the EQ predicate on the "Transfertime" field.
func TransfertimeEQ(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransfertime), v))
	})
}

// TransfertimeNEQ applies the NEQ predicate on the "Transfertime" field.
func TransfertimeNEQ(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransfertime), v))
	})
}

// TransfertimeIn applies the In predicate on the "Transfertime" field.
func TransfertimeIn(vs ...time.Time) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTransfertime), v...))
	})
}

// TransfertimeNotIn applies the NotIn predicate on the "Transfertime" field.
func TransfertimeNotIn(vs ...time.Time) predicate.Payback {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Payback(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTransfertime), v...))
	})
}

// TransfertimeGT applies the GT predicate on the "Transfertime" field.
func TransfertimeGT(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransfertime), v))
	})
}

// TransfertimeGTE applies the GTE predicate on the "Transfertime" field.
func TransfertimeGTE(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransfertime), v))
	})
}

// TransfertimeLT applies the LT predicate on the "Transfertime" field.
func TransfertimeLT(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransfertime), v))
	})
}

// TransfertimeLTE applies the LTE predicate on the "Transfertime" field.
func TransfertimeLTE(v time.Time) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransfertime), v))
	})
}

// HasOfficer applies the HasEdge predicate on the "Officer" edge.
func HasOfficer() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOfficerWith applies the HasEdge predicate on the "Officer" edge with a given conditions (other predicates).
func HasOfficerWith(preds ...predicate.Officer) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMember applies the HasEdge predicate on the "Member" edge.
func HasMember() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "Member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "Product" edge.
func HasProduct() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "Product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBank applies the HasEdge predicate on the "Bank" edge.
func HasBank() predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBankWith applies the HasEdge predicate on the "Bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.Bank) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BankInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Payback) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Payback) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Payback) predicate.Payback {
	return predicate.Payback(func(s *sql.Selector) {
		p(s.Not())
	})
}
