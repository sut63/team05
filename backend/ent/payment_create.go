// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/bank"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/moneytransfer"
	"github.com/sut63/team05/ent/payment"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
}

// SetAccountName sets the account_name field.
func (pc *PaymentCreate) SetAccountName(s string) *PaymentCreate {
	pc.mutation.SetAccountName(s)
	return pc
}

// SetAccountNumber sets the account_number field.
func (pc *PaymentCreate) SetAccountNumber(s string) *PaymentCreate {
	pc.mutation.SetAccountNumber(s)
	return pc
}

// SetTransferTime sets the transfer_time field.
func (pc *PaymentCreate) SetTransferTime(t time.Time) *PaymentCreate {
	pc.mutation.SetTransferTime(t)
	return pc
}

// SetNillableTransferTime sets the transfer_time field if the given value is not nil.
func (pc *PaymentCreate) SetNillableTransferTime(t *time.Time) *PaymentCreate {
	if t != nil {
		pc.SetTransferTime(*t)
	}
	return pc
}

// SetInsuranceID sets the Insurance edge to Insurance by id.
func (pc *PaymentCreate) SetInsuranceID(id int) *PaymentCreate {
	pc.mutation.SetInsuranceID(id)
	return pc
}

// SetNillableInsuranceID sets the Insurance edge to Insurance by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableInsuranceID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetInsuranceID(*id)
	}
	return pc
}

// SetInsurance sets the Insurance edge to Insurance.
func (pc *PaymentCreate) SetInsurance(i *Insurance) *PaymentCreate {
	return pc.SetInsuranceID(i.ID)
}

// SetMoneytransferID sets the Moneytransfer edge to Moneytransfer by id.
func (pc *PaymentCreate) SetMoneytransferID(id int) *PaymentCreate {
	pc.mutation.SetMoneytransferID(id)
	return pc
}

// SetNillableMoneytransferID sets the Moneytransfer edge to Moneytransfer by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableMoneytransferID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetMoneytransferID(*id)
	}
	return pc
}

// SetMoneytransfer sets the Moneytransfer edge to Moneytransfer.
func (pc *PaymentCreate) SetMoneytransfer(m *Moneytransfer) *PaymentCreate {
	return pc.SetMoneytransferID(m.ID)
}

// SetBankID sets the Bank edge to Bank by id.
func (pc *PaymentCreate) SetBankID(id int) *PaymentCreate {
	pc.mutation.SetBankID(id)
	return pc
}

// SetNillableBankID sets the Bank edge to Bank by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableBankID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetBankID(*id)
	}
	return pc
}

// SetBank sets the Bank edge to Bank.
func (pc *PaymentCreate) SetBank(b *Bank) *PaymentCreate {
	return pc.SetBankID(b.ID)
}

// SetMemberID sets the Member edge to Member by id.
func (pc *PaymentCreate) SetMemberID(id int) *PaymentCreate {
	pc.mutation.SetMemberID(id)
	return pc
}

// SetNillableMemberID sets the Member edge to Member by id if the given value is not nil.
func (pc *PaymentCreate) SetNillableMemberID(id *int) *PaymentCreate {
	if id != nil {
		pc = pc.SetMemberID(*id)
	}
	return pc
}

// SetMember sets the Member edge to Member.
func (pc *PaymentCreate) SetMember(m *Member) *PaymentCreate {
	return pc.SetMemberID(m.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	if _, ok := pc.mutation.AccountName(); !ok {
		return nil, &ValidationError{Name: "account_name", err: errors.New("ent: missing required field \"account_name\"")}
	}
	if v, ok := pc.mutation.AccountName(); ok {
		if err := payment.AccountNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "account_name", err: fmt.Errorf("ent: validator failed for field \"account_name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.AccountNumber(); !ok {
		return nil, &ValidationError{Name: "account_number", err: errors.New("ent: missing required field \"account_number\"")}
	}
	if v, ok := pc.mutation.AccountNumber(); ok {
		if err := payment.AccountNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "account_number", err: fmt.Errorf("ent: validator failed for field \"account_number\": %w", err)}
		}
	}
	if _, ok := pc.mutation.TransferTime(); !ok {
		v := payment.DefaultTransferTime()
		pc.mutation.SetTransferTime(v)
	}
	var (
		err  error
		node *Payment
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		pa    = &Payment{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: payment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.AccountName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldAccountName,
		})
		pa.AccountName = value
	}
	if value, ok := pc.mutation.AccountNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldAccountNumber,
		})
		pa.AccountNumber = value
	}
	if value, ok := pc.mutation.TransferTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldTransferTime,
		})
		pa.TransferTime = value
	}
	if nodes := pc.mutation.InsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InsuranceTable,
			Columns: []string{payment.InsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MoneytransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MoneytransferTable,
			Columns: []string{payment.MoneytransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moneytransfer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.BankTable,
			Columns: []string{payment.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
