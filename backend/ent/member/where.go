// Code generated by entc, DO NOT EDIT.

package member

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team05/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MemberEmail applies equality check predicate on the "member_email" field. It's identical to MemberEmailEQ.
func MemberEmail(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberEmail), v))
	})
}

// MemberName applies equality check predicate on the "member_name" field. It's identical to MemberNameEQ.
func MemberName(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberName), v))
	})
}

// MemberPassword applies equality check predicate on the "member_password" field. It's identical to MemberPasswordEQ.
func MemberPassword(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberPassword), v))
	})
}

// MemberEmailEQ applies the EQ predicate on the "member_email" field.
func MemberEmailEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailNEQ applies the NEQ predicate on the "member_email" field.
func MemberEmailNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailIn applies the In predicate on the "member_email" field.
func MemberEmailIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemberEmail), v...))
	})
}

// MemberEmailNotIn applies the NotIn predicate on the "member_email" field.
func MemberEmailNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemberEmail), v...))
	})
}

// MemberEmailGT applies the GT predicate on the "member_email" field.
func MemberEmailGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailGTE applies the GTE predicate on the "member_email" field.
func MemberEmailGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailLT applies the LT predicate on the "member_email" field.
func MemberEmailLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailLTE applies the LTE predicate on the "member_email" field.
func MemberEmailLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailContains applies the Contains predicate on the "member_email" field.
func MemberEmailContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailHasPrefix applies the HasPrefix predicate on the "member_email" field.
func MemberEmailHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailHasSuffix applies the HasSuffix predicate on the "member_email" field.
func MemberEmailHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailEqualFold applies the EqualFold predicate on the "member_email" field.
func MemberEmailEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemberEmail), v))
	})
}

// MemberEmailContainsFold applies the ContainsFold predicate on the "member_email" field.
func MemberEmailContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemberEmail), v))
	})
}

// MemberNameEQ applies the EQ predicate on the "member_name" field.
func MemberNameEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberName), v))
	})
}

// MemberNameNEQ applies the NEQ predicate on the "member_name" field.
func MemberNameNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemberName), v))
	})
}

// MemberNameIn applies the In predicate on the "member_name" field.
func MemberNameIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemberName), v...))
	})
}

// MemberNameNotIn applies the NotIn predicate on the "member_name" field.
func MemberNameNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemberName), v...))
	})
}

// MemberNameGT applies the GT predicate on the "member_name" field.
func MemberNameGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemberName), v))
	})
}

// MemberNameGTE applies the GTE predicate on the "member_name" field.
func MemberNameGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemberName), v))
	})
}

// MemberNameLT applies the LT predicate on the "member_name" field.
func MemberNameLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemberName), v))
	})
}

// MemberNameLTE applies the LTE predicate on the "member_name" field.
func MemberNameLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemberName), v))
	})
}

// MemberNameContains applies the Contains predicate on the "member_name" field.
func MemberNameContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemberName), v))
	})
}

// MemberNameHasPrefix applies the HasPrefix predicate on the "member_name" field.
func MemberNameHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemberName), v))
	})
}

// MemberNameHasSuffix applies the HasSuffix predicate on the "member_name" field.
func MemberNameHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemberName), v))
	})
}

// MemberNameEqualFold applies the EqualFold predicate on the "member_name" field.
func MemberNameEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemberName), v))
	})
}

// MemberNameContainsFold applies the ContainsFold predicate on the "member_name" field.
func MemberNameContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemberName), v))
	})
}

// MemberPasswordEQ applies the EQ predicate on the "member_password" field.
func MemberPasswordEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordNEQ applies the NEQ predicate on the "member_password" field.
func MemberPasswordNEQ(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordIn applies the In predicate on the "member_password" field.
func MemberPasswordIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemberPassword), v...))
	})
}

// MemberPasswordNotIn applies the NotIn predicate on the "member_password" field.
func MemberPasswordNotIn(vs ...string) predicate.Member {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Member(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemberPassword), v...))
	})
}

// MemberPasswordGT applies the GT predicate on the "member_password" field.
func MemberPasswordGT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordGTE applies the GTE predicate on the "member_password" field.
func MemberPasswordGTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordLT applies the LT predicate on the "member_password" field.
func MemberPasswordLT(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordLTE applies the LTE predicate on the "member_password" field.
func MemberPasswordLTE(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordContains applies the Contains predicate on the "member_password" field.
func MemberPasswordContains(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordHasPrefix applies the HasPrefix predicate on the "member_password" field.
func MemberPasswordHasPrefix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordHasSuffix applies the HasSuffix predicate on the "member_password" field.
func MemberPasswordHasSuffix(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordEqualFold applies the EqualFold predicate on the "member_password" field.
func MemberPasswordEqualFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemberPassword), v))
	})
}

// MemberPasswordContainsFold applies the ContainsFold predicate on the "member_password" field.
func MemberPasswordContainsFold(v string) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemberPassword), v))
	})
}

// HasMemberInsurance applies the HasEdge predicate on the "member_insurance" edge.
func HasMemberInsurance() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInsuranceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberInsuranceTable, MemberInsuranceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberInsuranceWith applies the HasEdge predicate on the "member_insurance" edge with a given conditions (other predicates).
func HasMemberInsuranceWith(preds ...predicate.Insurance) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInsuranceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberInsuranceTable, MemberInsuranceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberPayment applies the HasEdge predicate on the "member_payment" edge.
func HasMemberPayment() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberPaymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberPaymentTable, MemberPaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberPaymentWith applies the HasEdge predicate on the "member_payment" edge with a given conditions (other predicates).
func HasMemberPaymentWith(preds ...predicate.Payment) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberPaymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberPaymentTable, MemberPaymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMemberInquiry applies the HasEdge predicate on the "member_inquiry" edge.
func HasMemberInquiry() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInquiryTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberInquiryTable, MemberInquiryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberInquiryWith applies the HasEdge predicate on the "member_inquiry" edge with a given conditions (other predicates).
func HasMemberInquiryWith(preds ...predicate.Inquiry) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInquiryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberInquiryTable, MemberInquiryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

<<<<<<< HEAD
// HasMemberPayback applies the HasEdge predicate on the "member_payback" edge.
func HasMemberPayback() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberPaybackTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberPaybackTable, MemberPaybackColumn),
=======
// HasMemberRecordinsurance applies the HasEdge predicate on the "member_recordinsurance" edge.
func HasMemberRecordinsurance() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberRecordinsuranceTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberRecordinsuranceTable, MemberRecordinsuranceColumn),
>>>>>>> 4637a9d (ทำ Entity สำหรับเก็บข้อมูลสิทธิประกันสุขภาพ - fix #53)
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

<<<<<<< HEAD
// HasMemberPaybackWith applies the HasEdge predicate on the "member_payback" edge with a given conditions (other predicates).
func HasMemberPaybackWith(preds ...predicate.Payback) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberPaybackInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberPaybackTable, MemberPaybackColumn),
=======
// HasMemberRecordinsuranceWith applies the HasEdge predicate on the "member_recordinsurance" edge with a given conditions (other predicates).
func HasMemberRecordinsuranceWith(preds ...predicate.Recordinsurance) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberRecordinsuranceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MemberRecordinsuranceTable, MemberRecordinsuranceColumn),
>>>>>>> 4637a9d (ทำ Entity สำหรับเก็บข้อมูลสิทธิประกันสุขภาพ - fix #53)
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Member) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		p(s.Not())
	})
}
