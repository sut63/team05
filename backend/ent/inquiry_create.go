// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/category"
	"github.com/sut63/team05/ent/inquiry"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/product"
)

// InquiryCreate is the builder for creating a Inquiry entity.
type InquiryCreate struct {
	config
	mutation *InquiryMutation
	hooks    []Hook
}

// SetInquiryInguiryMessages sets the Inquiry_inguiry_messages field.
func (ic *InquiryCreate) SetInquiryInguiryMessages(s string) *InquiryCreate {
	ic.mutation.SetInquiryInguiryMessages(s)
	return ic
}

// SetInquiryTimeMessages sets the Inquiry_time_messages field.
func (ic *InquiryCreate) SetInquiryTimeMessages(t time.Time) *InquiryCreate {
	ic.mutation.SetInquiryTimeMessages(t)
	return ic
}

// SetNillableInquiryTimeMessages sets the Inquiry_time_messages field if the given value is not nil.
func (ic *InquiryCreate) SetNillableInquiryTimeMessages(t *time.Time) *InquiryCreate {
	if t != nil {
		ic.SetInquiryTimeMessages(*t)
	}
	return ic
}

// SetMemberID sets the Member edge to Member by id.
func (ic *InquiryCreate) SetMemberID(id int) *InquiryCreate {
	ic.mutation.SetMemberID(id)
	return ic
}

// SetNillableMemberID sets the Member edge to Member by id if the given value is not nil.
func (ic *InquiryCreate) SetNillableMemberID(id *int) *InquiryCreate {
	if id != nil {
		ic = ic.SetMemberID(*id)
	}
	return ic
}

// SetMember sets the Member edge to Member.
func (ic *InquiryCreate) SetMember(m *Member) *InquiryCreate {
	return ic.SetMemberID(m.ID)
}

// SetCategoryID sets the Category edge to Category by id.
func (ic *InquiryCreate) SetCategoryID(id int) *InquiryCreate {
	ic.mutation.SetCategoryID(id)
	return ic
}

// SetNillableCategoryID sets the Category edge to Category by id if the given value is not nil.
func (ic *InquiryCreate) SetNillableCategoryID(id *int) *InquiryCreate {
	if id != nil {
		ic = ic.SetCategoryID(*id)
	}
	return ic
}

// SetCategory sets the Category edge to Category.
func (ic *InquiryCreate) SetCategory(c *Category) *InquiryCreate {
	return ic.SetCategoryID(c.ID)
}

// SetOfficerID sets the Officer edge to Officer by id.
func (ic *InquiryCreate) SetOfficerID(id int) *InquiryCreate {
	ic.mutation.SetOfficerID(id)
	return ic
}

// SetNillableOfficerID sets the Officer edge to Officer by id if the given value is not nil.
func (ic *InquiryCreate) SetNillableOfficerID(id *int) *InquiryCreate {
	if id != nil {
		ic = ic.SetOfficerID(*id)
	}
	return ic
}

// SetOfficer sets the Officer edge to Officer.
func (ic *InquiryCreate) SetOfficer(o *Officer) *InquiryCreate {
	return ic.SetOfficerID(o.ID)
}

// SetProductID sets the Product edge to Product by id.
func (ic *InquiryCreate) SetProductID(id int) *InquiryCreate {
	ic.mutation.SetProductID(id)
	return ic
}

// SetNillableProductID sets the Product edge to Product by id if the given value is not nil.
func (ic *InquiryCreate) SetNillableProductID(id *int) *InquiryCreate {
	if id != nil {
		ic = ic.SetProductID(*id)
	}
	return ic
}

// SetProduct sets the Product edge to Product.
func (ic *InquiryCreate) SetProduct(p *Product) *InquiryCreate {
	return ic.SetProductID(p.ID)
}

// Mutation returns the InquiryMutation object of the builder.
func (ic *InquiryCreate) Mutation() *InquiryMutation {
	return ic.mutation
}

// Save creates the Inquiry in the database.
func (ic *InquiryCreate) Save(ctx context.Context) (*Inquiry, error) {
	if _, ok := ic.mutation.InquiryInguiryMessages(); !ok {
		return nil, &ValidationError{Name: "Inquiry_inguiry_messages", err: errors.New("ent: missing required field \"Inquiry_inguiry_messages\"")}
	}
	if v, ok := ic.mutation.InquiryInguiryMessages(); ok {
		if err := inquiry.InquiryInguiryMessagesValidator(v); err != nil {
			return nil, &ValidationError{Name: "Inquiry_inguiry_messages", err: fmt.Errorf("ent: validator failed for field \"Inquiry_inguiry_messages\": %w", err)}
		}
	}
	if _, ok := ic.mutation.InquiryTimeMessages(); !ok {
		v := inquiry.DefaultInquiryTimeMessages()
		ic.mutation.SetInquiryTimeMessages(v)
	}
	var (
		err  error
		node *Inquiry
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InquiryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InquiryCreate) SaveX(ctx context.Context) *Inquiry {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *InquiryCreate) sqlSave(ctx context.Context) (*Inquiry, error) {
	i, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}

func (ic *InquiryCreate) createSpec() (*Inquiry, *sqlgraph.CreateSpec) {
	var (
		i     = &Inquiry{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inquiry.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inquiry.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.InquiryInguiryMessages(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inquiry.FieldInquiryInguiryMessages,
		})
		i.InquiryInguiryMessages = value
	}
	if value, ok := ic.mutation.InquiryTimeMessages(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: inquiry.FieldInquiryTimeMessages,
		})
		i.InquiryTimeMessages = value
	}
	if nodes := ic.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.MemberTable,
			Columns: []string{inquiry.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.CategoryTable,
			Columns: []string{inquiry.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.OfficerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.OfficerTable,
			Columns: []string{inquiry.OfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inquiry.ProductTable,
			Columns: []string{inquiry.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return i, _spec
}
