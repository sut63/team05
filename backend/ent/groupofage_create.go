// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/groupofage"
	"github.com/sut63/team05/ent/product"
)

// GroupOfAgeCreate is the builder for creating a GroupOfAge entity.
type GroupOfAgeCreate struct {
	config
	mutation *GroupOfAgeMutation
	hooks    []Hook
}

// SetGroupOfAgeName sets the group_of_age_name field.
func (goac *GroupOfAgeCreate) SetGroupOfAgeName(s string) *GroupOfAgeCreate {
	goac.mutation.SetGroupOfAgeName(s)
	return goac
}

// SetGroupOfAgeAge sets the group_of_age_age field.
func (goac *GroupOfAgeCreate) SetGroupOfAgeAge(s string) *GroupOfAgeCreate {
	goac.mutation.SetGroupOfAgeAge(s)
	return goac
}

// AddGroupofageProductIDs adds the groupofage_product edge to Product by ids.
func (goac *GroupOfAgeCreate) AddGroupofageProductIDs(ids ...int) *GroupOfAgeCreate {
	goac.mutation.AddGroupofageProductIDs(ids...)
	return goac
}

// AddGroupofageProduct adds the groupofage_product edges to Product.
func (goac *GroupOfAgeCreate) AddGroupofageProduct(p ...*Product) *GroupOfAgeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return goac.AddGroupofageProductIDs(ids...)
}

// Mutation returns the GroupOfAgeMutation object of the builder.
func (goac *GroupOfAgeCreate) Mutation() *GroupOfAgeMutation {
	return goac.mutation
}

// Save creates the GroupOfAge in the database.
func (goac *GroupOfAgeCreate) Save(ctx context.Context) (*GroupOfAge, error) {
	if _, ok := goac.mutation.GroupOfAgeName(); !ok {
		return nil, &ValidationError{Name: "group_of_age_name", err: errors.New("ent: missing required field \"group_of_age_name\"")}
	}
	if _, ok := goac.mutation.GroupOfAgeAge(); !ok {
		return nil, &ValidationError{Name: "group_of_age_age", err: errors.New("ent: missing required field \"group_of_age_age\"")}
	}
	var (
		err  error
		node *GroupOfAge
	)
	if len(goac.hooks) == 0 {
		node, err = goac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupOfAgeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			goac.mutation = mutation
			node, err = goac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(goac.hooks) - 1; i >= 0; i-- {
			mut = goac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, goac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (goac *GroupOfAgeCreate) SaveX(ctx context.Context) *GroupOfAge {
	v, err := goac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (goac *GroupOfAgeCreate) sqlSave(ctx context.Context) (*GroupOfAge, error) {
	goa, _spec := goac.createSpec()
	if err := sqlgraph.CreateNode(ctx, goac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	goa.ID = int(id)
	return goa, nil
}

func (goac *GroupOfAgeCreate) createSpec() (*GroupOfAge, *sqlgraph.CreateSpec) {
	var (
		goa   = &GroupOfAge{config: goac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: groupofage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupofage.FieldID,
			},
		}
	)
	if value, ok := goac.mutation.GroupOfAgeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupofage.FieldGroupOfAgeName,
		})
		goa.GroupOfAgeName = value
	}
	if value, ok := goac.mutation.GroupOfAgeAge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupofage.FieldGroupOfAgeAge,
		})
		goa.GroupOfAgeAge = value
	}
	if nodes := goac.mutation.GroupofageProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   groupofage.GroupofageProductTable,
			Columns: []string{groupofage.GroupofageProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return goa, _spec
}
