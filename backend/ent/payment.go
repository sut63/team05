// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team05/ent/bank"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/moneytransfer"
	"github.com/sut63/team05/ent/payment"
	"github.com/sut63/team05/ent/product"
)

// Payment is the model entity for the Payment schema.
type Payment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountName holds the value of the "account_name" field.
	AccountName string `json:"account_name,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// TransferTime holds the value of the "transfer_time" field.
	TransferTime time.Time `json:"transfer_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaymentQuery when eager-loading is set.
	Edges            PaymentEdges `json:"edges"`
	bank_id          *int
	insurance_id     *int
	member_id        *int
	moneytransfer_id *int
	product_id       *int
}

// PaymentEdges holds the relations/edges for other nodes in the graph.
type PaymentEdges struct {
	// Insurance holds the value of the Insurance edge.
	Insurance *Insurance
	// MoneyTransfer holds the value of the MoneyTransfer edge.
	MoneyTransfer *MoneyTransfer
	// Bank holds the value of the Bank edge.
	Bank *Bank
	// Member holds the value of the Member edge.
	Member *Member
	// Product holds the value of the Product edge.
	Product *Product
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// InsuranceOrErr returns the Insurance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) InsuranceOrErr() (*Insurance, error) {
	if e.loadedTypes[0] {
		if e.Insurance == nil {
			// The edge Insurance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: insurance.Label}
		}
		return e.Insurance, nil
	}
	return nil, &NotLoadedError{edge: "Insurance"}
}

// MoneyTransferOrErr returns the MoneyTransfer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) MoneyTransferOrErr() (*MoneyTransfer, error) {
	if e.loadedTypes[1] {
		if e.MoneyTransfer == nil {
			// The edge MoneyTransfer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: moneytransfer.Label}
		}
		return e.MoneyTransfer, nil
	}
	return nil, &NotLoadedError{edge: "MoneyTransfer"}
}

// BankOrErr returns the Bank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) BankOrErr() (*Bank, error) {
	if e.loadedTypes[2] {
		if e.Bank == nil {
			// The edge Bank was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: bank.Label}
		}
		return e.Bank, nil
	}
	return nil, &NotLoadedError{edge: "Bank"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) MemberOrErr() (*Member, error) {
	if e.loadedTypes[3] {
		if e.Member == nil {
			// The edge Member was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "Member"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaymentEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[4] {
		if e.Product == nil {
			// The edge Product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "Product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Payment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // account_name
		&sql.NullString{}, // account_number
		&sql.NullTime{},   // transfer_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Payment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // bank_id
		&sql.NullInt64{}, // insurance_id
		&sql.NullInt64{}, // member_id
		&sql.NullInt64{}, // moneytransfer_id
		&sql.NullInt64{}, // product_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Payment fields.
func (pa *Payment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(payment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pa.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field account_name", values[0])
	} else if value.Valid {
		pa.AccountName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field account_number", values[1])
	} else if value.Valid {
		pa.AccountNumber = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field transfer_time", values[2])
	} else if value.Valid {
		pa.TransferTime = value.Time
	}
	values = values[3:]
	if len(values) == len(payment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field bank_id", value)
		} else if value.Valid {
			pa.bank_id = new(int)
			*pa.bank_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field insurance_id", value)
		} else if value.Valid {
			pa.insurance_id = new(int)
			*pa.insurance_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field member_id", value)
		} else if value.Valid {
			pa.member_id = new(int)
			*pa.member_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field moneytransfer_id", value)
		} else if value.Valid {
			pa.moneytransfer_id = new(int)
			*pa.moneytransfer_id = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field product_id", value)
		} else if value.Valid {
			pa.product_id = new(int)
			*pa.product_id = int(value.Int64)
		}
	}
	return nil
}

// QueryInsurance queries the Insurance edge of the Payment.
func (pa *Payment) QueryInsurance() *InsuranceQuery {
	return (&PaymentClient{config: pa.config}).QueryInsurance(pa)
}

// QueryMoneyTransfer queries the MoneyTransfer edge of the Payment.
func (pa *Payment) QueryMoneyTransfer() *MoneyTransferQuery {
	return (&PaymentClient{config: pa.config}).QueryMoneyTransfer(pa)
}

// QueryBank queries the Bank edge of the Payment.
func (pa *Payment) QueryBank() *BankQuery {
	return (&PaymentClient{config: pa.config}).QueryBank(pa)
}

// QueryMember queries the Member edge of the Payment.
func (pa *Payment) QueryMember() *MemberQuery {
	return (&PaymentClient{config: pa.config}).QueryMember(pa)
}

// QueryProduct queries the Product edge of the Payment.
func (pa *Payment) QueryProduct() *ProductQuery {
	return (&PaymentClient{config: pa.config}).QueryProduct(pa)
}

// Update returns a builder for updating this Payment.
// Note that, you need to call Payment.Unwrap() before calling this method, if this Payment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Payment) Update() *PaymentUpdateOne {
	return (&PaymentClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pa *Payment) Unwrap() *Payment {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Payment is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Payment) String() string {
	var builder strings.Builder
	builder.WriteString("Payment(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", account_name=")
	builder.WriteString(pa.AccountName)
	builder.WriteString(", account_number=")
	builder.WriteString(pa.AccountNumber)
	builder.WriteString(", transfer_time=")
	builder.WriteString(pa.TransferTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Payments is a parsable slice of Payment.
type Payments []*Payment

func (pa Payments) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
