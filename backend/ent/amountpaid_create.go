// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/amountpaid"
	"github.com/sut63/team05/ent/recordinsurance"
)

// AmountpaidCreate is the builder for creating a Amountpaid entity.
type AmountpaidCreate struct {
	config
	mutation *AmountpaidMutation
	hooks    []Hook
}

// SetAmountpaidMoney sets the amountpaid_money field.
func (ac *AmountpaidCreate) SetAmountpaidMoney(f float64) *AmountpaidCreate {
	ac.mutation.SetAmountpaidMoney(f)
	return ac
}

// AddAmountpaidRecordinsuranceIDs adds the amountpaid_recordinsurance edge to Recordinsurance by ids.
func (ac *AmountpaidCreate) AddAmountpaidRecordinsuranceIDs(ids ...int) *AmountpaidCreate {
	ac.mutation.AddAmountpaidRecordinsuranceIDs(ids...)
	return ac
}

// AddAmountpaidRecordinsurance adds the amountpaid_recordinsurance edges to Recordinsurance.
func (ac *AmountpaidCreate) AddAmountpaidRecordinsurance(r ...*Recordinsurance) *AmountpaidCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddAmountpaidRecordinsuranceIDs(ids...)
}

// Mutation returns the AmountpaidMutation object of the builder.
func (ac *AmountpaidCreate) Mutation() *AmountpaidMutation {
	return ac.mutation
}

// Save creates the Amountpaid in the database.
func (ac *AmountpaidCreate) Save(ctx context.Context) (*Amountpaid, error) {
	if _, ok := ac.mutation.AmountpaidMoney(); !ok {
		return nil, &ValidationError{Name: "amountpaid_money", err: errors.New("ent: missing required field \"amountpaid_money\"")}
	}
	var (
		err  error
		node *Amountpaid
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AmountpaidMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AmountpaidCreate) SaveX(ctx context.Context) *Amountpaid {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AmountpaidCreate) sqlSave(ctx context.Context) (*Amountpaid, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}

func (ac *AmountpaidCreate) createSpec() (*Amountpaid, *sqlgraph.CreateSpec) {
	var (
		a     = &Amountpaid{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: amountpaid.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: amountpaid.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.AmountpaidMoney(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: amountpaid.FieldAmountpaidMoney,
		})
		a.AmountpaidMoney = value
	}
	if nodes := ac.mutation.AmountpaidRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   amountpaid.AmountpaidRecordinsuranceTable,
			Columns: []string{amountpaid.AmountpaidRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return a, _spec
}
