// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team05/ent/category"
	"github.com/sut63/team05/ent/inquiry"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/product"
)

// Inquiry is the model entity for the Inquiry schema.
type Inquiry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// InquiryNameMessages holds the value of the "Inquiry_name_messages" field.
	InquiryNameMessages string `json:"Inquiry_name_messages,omitempty"`
	// InquiryPhoneMessages holds the value of the "Inquiry_phone_messages" field.
	InquiryPhoneMessages string `json:"Inquiry_phone_messages,omitempty"`
	// InquiryAgeMessages holds the value of the "Inquiry_age_messages" field.
	InquiryAgeMessages int `json:"Inquiry_age_messages,omitempty"`
	// InquiryMessages holds the value of the "Inquiry_messages" field.
	InquiryMessages string `json:"Inquiry_messages,omitempty"`
	// InquiryTimeMessages holds the value of the "Inquiry_time_messages" field.
	InquiryTimeMessages time.Time `json:"Inquiry_time_messages,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InquiryQuery when eager-loading is set.
	Edges       InquiryEdges `json:"edges"`
	category_id *int
	member_id   *int
	officer_id  *int
	product_id  *int
}

// InquiryEdges holds the relations/edges for other nodes in the graph.
type InquiryEdges struct {
	// Member holds the value of the Member edge.
	Member *Member
	// Category holds the value of the Category edge.
	Category *Category
	// Officer holds the value of the Officer edge.
	Officer *Officer
	// Product holds the value of the Product edge.
	Product *Product
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InquiryEdges) MemberOrErr() (*Member, error) {
	if e.loadedTypes[0] {
		if e.Member == nil {
			// The edge Member was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "Member"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InquiryEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[1] {
		if e.Category == nil {
			// The edge Category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "Category"}
}

// OfficerOrErr returns the Officer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InquiryEdges) OfficerOrErr() (*Officer, error) {
	if e.loadedTypes[2] {
		if e.Officer == nil {
			// The edge Officer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: officer.Label}
		}
		return e.Officer, nil
	}
	return nil, &NotLoadedError{edge: "Officer"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InquiryEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[3] {
		if e.Product == nil {
			// The edge Product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "Product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inquiry) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Inquiry_name_messages
		&sql.NullString{}, // Inquiry_phone_messages
		&sql.NullInt64{},  // Inquiry_age_messages
		&sql.NullString{}, // Inquiry_messages
		&sql.NullTime{},   // Inquiry_time_messages
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Inquiry) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // category_id
		&sql.NullInt64{}, // member_id
		&sql.NullInt64{}, // officer_id
		&sql.NullInt64{}, // product_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inquiry fields.
func (i *Inquiry) assignValues(values ...interface{}) error {
	if m, n := len(values), len(inquiry.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	i.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Inquiry_name_messages", values[0])
	} else if value.Valid {
		i.InquiryNameMessages = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Inquiry_phone_messages", values[1])
	} else if value.Valid {
		i.InquiryPhoneMessages = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Inquiry_age_messages", values[2])
	} else if value.Valid {
		i.InquiryAgeMessages = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Inquiry_messages", values[3])
	} else if value.Valid {
		i.InquiryMessages = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Inquiry_time_messages", values[4])
	} else if value.Valid {
		i.InquiryTimeMessages = value.Time
	}
	values = values[5:]
	if len(values) == len(inquiry.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field category_id", value)
		} else if value.Valid {
			i.category_id = new(int)
			*i.category_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field member_id", value)
		} else if value.Valid {
			i.member_id = new(int)
			*i.member_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field officer_id", value)
		} else if value.Valid {
			i.officer_id = new(int)
			*i.officer_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field product_id", value)
		} else if value.Valid {
			i.product_id = new(int)
			*i.product_id = int(value.Int64)
		}
	}
	return nil
}

// QueryMember queries the Member edge of the Inquiry.
func (i *Inquiry) QueryMember() *MemberQuery {
	return (&InquiryClient{config: i.config}).QueryMember(i)
}

// QueryCategory queries the Category edge of the Inquiry.
func (i *Inquiry) QueryCategory() *CategoryQuery {
	return (&InquiryClient{config: i.config}).QueryCategory(i)
}

// QueryOfficer queries the Officer edge of the Inquiry.
func (i *Inquiry) QueryOfficer() *OfficerQuery {
	return (&InquiryClient{config: i.config}).QueryOfficer(i)
}

// QueryProduct queries the Product edge of the Inquiry.
func (i *Inquiry) QueryProduct() *ProductQuery {
	return (&InquiryClient{config: i.config}).QueryProduct(i)
}

// Update returns a builder for updating this Inquiry.
// Note that, you need to call Inquiry.Unwrap() before calling this method, if this Inquiry
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inquiry) Update() *InquiryUpdateOne {
	return (&InquiryClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (i *Inquiry) Unwrap() *Inquiry {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Inquiry is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inquiry) String() string {
	var builder strings.Builder
	builder.WriteString("Inquiry(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", Inquiry_name_messages=")
	builder.WriteString(i.InquiryNameMessages)
	builder.WriteString(", Inquiry_phone_messages=")
	builder.WriteString(i.InquiryPhoneMessages)
	builder.WriteString(", Inquiry_age_messages=")
	builder.WriteString(fmt.Sprintf("%v", i.InquiryAgeMessages))
	builder.WriteString(", Inquiry_messages=")
	builder.WriteString(i.InquiryMessages)
	builder.WriteString(", Inquiry_time_messages=")
	builder.WriteString(i.InquiryTimeMessages.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Inquiries is a parsable slice of Inquiry.
type Inquiries []*Inquiry

func (i Inquiries) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
