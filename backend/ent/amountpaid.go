// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team05/ent/amountpaid"
)

// Amountpaid is the model entity for the Amountpaid schema.
type Amountpaid struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AmountpaidMoney holds the value of the "amountpaid_money" field.
	AmountpaidMoney float64 `json:"amountpaid_money,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AmountpaidQuery when eager-loading is set.
	Edges AmountpaidEdges `json:"edges"`
}

// AmountpaidEdges holds the relations/edges for other nodes in the graph.
type AmountpaidEdges struct {
	// AmountpaidRecordinsurance holds the value of the amountpaid_recordinsurance edge.
	AmountpaidRecordinsurance []*Recordinsurance
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AmountpaidRecordinsuranceOrErr returns the AmountpaidRecordinsurance value or an error if the edge
// was not loaded in eager-loading.
func (e AmountpaidEdges) AmountpaidRecordinsuranceOrErr() ([]*Recordinsurance, error) {
	if e.loadedTypes[0] {
		return e.AmountpaidRecordinsurance, nil
	}
	return nil, &NotLoadedError{edge: "amountpaid_recordinsurance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Amountpaid) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullFloat64{}, // amountpaid_money
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Amountpaid fields.
func (a *Amountpaid) assignValues(values ...interface{}) error {
	if m, n := len(values), len(amountpaid.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field amountpaid_money", values[0])
	} else if value.Valid {
		a.AmountpaidMoney = value.Float64
	}
	return nil
}

// QueryAmountpaidRecordinsurance queries the amountpaid_recordinsurance edge of the Amountpaid.
func (a *Amountpaid) QueryAmountpaidRecordinsurance() *RecordinsuranceQuery {
	return (&AmountpaidClient{config: a.config}).QueryAmountpaidRecordinsurance(a)
}

// Update returns a builder for updating this Amountpaid.
// Note that, you need to call Amountpaid.Unwrap() before calling this method, if this Amountpaid
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Amountpaid) Update() *AmountpaidUpdateOne {
	return (&AmountpaidClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Amountpaid) Unwrap() *Amountpaid {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Amountpaid is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Amountpaid) String() string {
	var builder strings.Builder
	builder.WriteString("Amountpaid(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", amountpaid_money=")
	builder.WriteString(fmt.Sprintf("%v", a.AmountpaidMoney))
	builder.WriteByte(')')
	return builder.String()
}

// Amountpaids is a parsable slice of Amountpaid.
type Amountpaids []*Amountpaid

func (a Amountpaids) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
