// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/inquiry"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/payback"
	"github.com/sut63/team05/ent/payment"
	"github.com/sut63/team05/ent/recordinsurance"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
}

// SetMemberEmail sets the member_email field.
func (mc *MemberCreate) SetMemberEmail(s string) *MemberCreate {
	mc.mutation.SetMemberEmail(s)
	return mc
}

// SetMemberName sets the member_name field.
func (mc *MemberCreate) SetMemberName(s string) *MemberCreate {
	mc.mutation.SetMemberName(s)
	return mc
}

// SetMemberPassword sets the member_password field.
func (mc *MemberCreate) SetMemberPassword(s string) *MemberCreate {
	mc.mutation.SetMemberPassword(s)
	return mc
}

// AddMemberInsuranceIDs adds the member_insurance edge to Insurance by ids.
func (mc *MemberCreate) AddMemberInsuranceIDs(ids ...int) *MemberCreate {
	mc.mutation.AddMemberInsuranceIDs(ids...)
	return mc
}

// AddMemberInsurance adds the member_insurance edges to Insurance.
func (mc *MemberCreate) AddMemberInsurance(i ...*Insurance) *MemberCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mc.AddMemberInsuranceIDs(ids...)
}

// AddMemberPaymentIDs adds the member_payment edge to Payment by ids.
func (mc *MemberCreate) AddMemberPaymentIDs(ids ...int) *MemberCreate {
	mc.mutation.AddMemberPaymentIDs(ids...)
	return mc
}

// AddMemberPayment adds the member_payment edges to Payment.
func (mc *MemberCreate) AddMemberPayment(p ...*Payment) *MemberCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddMemberPaymentIDs(ids...)
}

// AddMemberInquiryIDs adds the member_inquiry edge to Inquiry by ids.
func (mc *MemberCreate) AddMemberInquiryIDs(ids ...int) *MemberCreate {
	mc.mutation.AddMemberInquiryIDs(ids...)
	return mc
}

// AddMemberInquiry adds the member_inquiry edges to Inquiry.
func (mc *MemberCreate) AddMemberInquiry(i ...*Inquiry) *MemberCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mc.AddMemberInquiryIDs(ids...)
}

// AddMemberPaybackIDs adds the member_payback edge to Payback by ids.
func (mc *MemberCreate) AddMemberPaybackIDs(ids ...int) *MemberCreate {
	mc.mutation.AddMemberPaybackIDs(ids...)
	return mc
}

// AddMemberPayback adds the member_payback edges to Payback.
func (mc *MemberCreate) AddMemberPayback(p ...*Payback) *MemberCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddMemberPaybackIDs(ids...)
}

// AddMemberRecordinsuranceIDs adds the member_recordinsurance edge to Recordinsurance by ids.
func (mc *MemberCreate) AddMemberRecordinsuranceIDs(ids ...int) *MemberCreate {
	mc.mutation.AddMemberRecordinsuranceIDs(ids...)
	return mc
}

// AddMemberRecordinsurance adds the member_recordinsurance edges to Recordinsurance.
func (mc *MemberCreate) AddMemberRecordinsurance(r ...*Recordinsurance) *MemberCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mc.AddMemberRecordinsuranceIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mc *MemberCreate) Mutation() *MemberMutation {
	return mc.mutation
}

// Save creates the Member in the database.
func (mc *MemberCreate) Save(ctx context.Context) (*Member, error) {
	if _, ok := mc.mutation.MemberEmail(); !ok {
		return nil, &ValidationError{Name: "member_email", err: errors.New("ent: missing required field \"member_email\"")}
	}
	if v, ok := mc.mutation.MemberEmail(); ok {
		if err := member.MemberEmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "member_email", err: fmt.Errorf("ent: validator failed for field \"member_email\": %w", err)}
		}
	}
	if _, ok := mc.mutation.MemberName(); !ok {
		return nil, &ValidationError{Name: "member_name", err: errors.New("ent: missing required field \"member_name\"")}
	}
	if v, ok := mc.mutation.MemberName(); ok {
		if err := member.MemberNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "member_name", err: fmt.Errorf("ent: validator failed for field \"member_name\": %w", err)}
		}
	}
	if _, ok := mc.mutation.MemberPassword(); !ok {
		return nil, &ValidationError{Name: "member_password", err: errors.New("ent: missing required field \"member_password\"")}
	}
	if v, ok := mc.mutation.MemberPassword(); ok {
		if err := member.MemberPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "member_password", err: fmt.Errorf("ent: validator failed for field \"member_password\": %w", err)}
		}
	}
	var (
		err  error
		node *Member
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	m, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}

func (mc *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		m     = &Member{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: member.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: member.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.MemberEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldMemberEmail,
		})
		m.MemberEmail = value
	}
	if value, ok := mc.mutation.MemberName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldMemberName,
		})
		m.MemberName = value
	}
	if value, ok := mc.mutation.MemberPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: member.FieldMemberPassword,
		})
		m.MemberPassword = value
	}
	if nodes := mc.mutation.MemberInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberInsuranceTable,
			Columns: []string{member.MemberInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MemberPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberPaymentTable,
			Columns: []string{member.MemberPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MemberInquiryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberInquiryTable,
			Columns: []string{member.MemberInquiryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inquiry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MemberPaybackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberPaybackTable,
			Columns: []string{member.MemberPaybackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.MemberRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   member.MemberRecordinsuranceTable,
			Columns: []string{member.MemberRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return m, _spec
}
