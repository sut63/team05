// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/amountpaid"
	"github.com/sut63/team05/ent/hospital"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/product"
	"github.com/sut63/team05/ent/recordinsurance"
)

// RecordinsuranceCreate is the builder for creating a Recordinsurance entity.
type RecordinsuranceCreate struct {
	config
	mutation *RecordinsuranceMutation
	hooks    []Hook
}

// SetRecordinsuranceTime sets the recordinsurance_time field.
func (rc *RecordinsuranceCreate) SetRecordinsuranceTime(t time.Time) *RecordinsuranceCreate {
	rc.mutation.SetRecordinsuranceTime(t)
	return rc
}

// SetNillableRecordinsuranceTime sets the recordinsurance_time field if the given value is not nil.
func (rc *RecordinsuranceCreate) SetNillableRecordinsuranceTime(t *time.Time) *RecordinsuranceCreate {
	if t != nil {
		rc.SetRecordinsuranceTime(*t)
	}
	return rc
}

// SetMemberID sets the Member edge to Member by id.
func (rc *RecordinsuranceCreate) SetMemberID(id int) *RecordinsuranceCreate {
	rc.mutation.SetMemberID(id)
	return rc
}

// SetNillableMemberID sets the Member edge to Member by id if the given value is not nil.
func (rc *RecordinsuranceCreate) SetNillableMemberID(id *int) *RecordinsuranceCreate {
	if id != nil {
		rc = rc.SetMemberID(*id)
	}
	return rc
}

// SetMember sets the Member edge to Member.
func (rc *RecordinsuranceCreate) SetMember(m *Member) *RecordinsuranceCreate {
	return rc.SetMemberID(m.ID)
}

// SetHospitalID sets the Hospital edge to Hospital by id.
func (rc *RecordinsuranceCreate) SetHospitalID(id int) *RecordinsuranceCreate {
	rc.mutation.SetHospitalID(id)
	return rc
}

// SetNillableHospitalID sets the Hospital edge to Hospital by id if the given value is not nil.
func (rc *RecordinsuranceCreate) SetNillableHospitalID(id *int) *RecordinsuranceCreate {
	if id != nil {
		rc = rc.SetHospitalID(*id)
	}
	return rc
}

// SetHospital sets the Hospital edge to Hospital.
func (rc *RecordinsuranceCreate) SetHospital(h *Hospital) *RecordinsuranceCreate {
	return rc.SetHospitalID(h.ID)
}

// SetOfficerID sets the Officer edge to Officer by id.
func (rc *RecordinsuranceCreate) SetOfficerID(id int) *RecordinsuranceCreate {
	rc.mutation.SetOfficerID(id)
	return rc
}

// SetNillableOfficerID sets the Officer edge to Officer by id if the given value is not nil.
func (rc *RecordinsuranceCreate) SetNillableOfficerID(id *int) *RecordinsuranceCreate {
	if id != nil {
		rc = rc.SetOfficerID(*id)
	}
	return rc
}

// SetOfficer sets the Officer edge to Officer.
func (rc *RecordinsuranceCreate) SetOfficer(o *Officer) *RecordinsuranceCreate {
	return rc.SetOfficerID(o.ID)
}

// SetProductID sets the Product edge to Product by id.
func (rc *RecordinsuranceCreate) SetProductID(id int) *RecordinsuranceCreate {
	rc.mutation.SetProductID(id)
	return rc
}

// SetNillableProductID sets the Product edge to Product by id if the given value is not nil.
func (rc *RecordinsuranceCreate) SetNillableProductID(id *int) *RecordinsuranceCreate {
	if id != nil {
		rc = rc.SetProductID(*id)
	}
	return rc
}

// SetProduct sets the Product edge to Product.
func (rc *RecordinsuranceCreate) SetProduct(p *Product) *RecordinsuranceCreate {
	return rc.SetProductID(p.ID)
}

// SetAmountpaidID sets the Amountpaid edge to Amountpaid by id.
func (rc *RecordinsuranceCreate) SetAmountpaidID(id int) *RecordinsuranceCreate {
	rc.mutation.SetAmountpaidID(id)
	return rc
}

// SetNillableAmountpaidID sets the Amountpaid edge to Amountpaid by id if the given value is not nil.
func (rc *RecordinsuranceCreate) SetNillableAmountpaidID(id *int) *RecordinsuranceCreate {
	if id != nil {
		rc = rc.SetAmountpaidID(*id)
	}
	return rc
}

// SetAmountpaid sets the Amountpaid edge to Amountpaid.
func (rc *RecordinsuranceCreate) SetAmountpaid(a *Amountpaid) *RecordinsuranceCreate {
	return rc.SetAmountpaidID(a.ID)
}

// Mutation returns the RecordinsuranceMutation object of the builder.
func (rc *RecordinsuranceCreate) Mutation() *RecordinsuranceMutation {
	return rc.mutation
}

// Save creates the Recordinsurance in the database.
func (rc *RecordinsuranceCreate) Save(ctx context.Context) (*Recordinsurance, error) {
	if _, ok := rc.mutation.RecordinsuranceTime(); !ok {
		v := recordinsurance.DefaultRecordinsuranceTime()
		rc.mutation.SetRecordinsuranceTime(v)
	}
	var (
		err  error
		node *Recordinsurance
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordinsuranceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordinsuranceCreate) SaveX(ctx context.Context) *Recordinsurance {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RecordinsuranceCreate) sqlSave(ctx context.Context) (*Recordinsurance, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RecordinsuranceCreate) createSpec() (*Recordinsurance, *sqlgraph.CreateSpec) {
	var (
		r     = &Recordinsurance{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: recordinsurance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recordinsurance.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.RecordinsuranceTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recordinsurance.FieldRecordinsuranceTime,
		})
		r.RecordinsuranceTime = value
	}
	if nodes := rc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordinsurance.MemberTable,
			Columns: []string{recordinsurance.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.HospitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordinsurance.HospitalTable,
			Columns: []string{recordinsurance.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.OfficerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordinsurance.OfficerTable,
			Columns: []string{recordinsurance.OfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordinsurance.ProductTable,
			Columns: []string{recordinsurance.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AmountpaidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordinsurance.AmountpaidTable,
			Columns: []string{recordinsurance.AmountpaidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: amountpaid.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
