// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/hospital"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/payment"
	"github.com/sut63/team05/ent/predicate"
	"github.com/sut63/team05/ent/product"
)

// InsuranceUpdate is the builder for updating Insurance entities.
type InsuranceUpdate struct {
	config
	hooks      []Hook
	mutation   *InsuranceMutation
	predicates []predicate.Insurance
}

// Where adds a new predicate for the builder.
func (iu *InsuranceUpdate) Where(ps ...predicate.Insurance) *InsuranceUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetInsuranceAddress sets the insurance_address field.
func (iu *InsuranceUpdate) SetInsuranceAddress(s string) *InsuranceUpdate {
	iu.mutation.SetInsuranceAddress(s)
	return iu
}

// SetInsuranceInsurer sets the insurance_insurer field.
func (iu *InsuranceUpdate) SetInsuranceInsurer(s string) *InsuranceUpdate {
	iu.mutation.SetInsuranceInsurer(s)
	return iu
}

// SetInsuranceTimeBuy sets the insurance_time_buy field.
func (iu *InsuranceUpdate) SetInsuranceTimeBuy(t time.Time) *InsuranceUpdate {
	iu.mutation.SetInsuranceTimeBuy(t)
	return iu
}

// SetNillableInsuranceTimeBuy sets the insurance_time_buy field if the given value is not nil.
func (iu *InsuranceUpdate) SetNillableInsuranceTimeBuy(t *time.Time) *InsuranceUpdate {
	if t != nil {
		iu.SetInsuranceTimeBuy(*t)
	}
	return iu
}

// SetInsuranceTimeFirstpay sets the insurance_time_firstpay field.
func (iu *InsuranceUpdate) SetInsuranceTimeFirstpay(t time.Time) *InsuranceUpdate {
	iu.mutation.SetInsuranceTimeFirstpay(t)
	return iu
}

// SetNillableInsuranceTimeFirstpay sets the insurance_time_firstpay field if the given value is not nil.
func (iu *InsuranceUpdate) SetNillableInsuranceTimeFirstpay(t *time.Time) *InsuranceUpdate {
	if t != nil {
		iu.SetInsuranceTimeFirstpay(*t)
	}
	return iu
}

// SetMemberID sets the Member edge to Member by id.
func (iu *InsuranceUpdate) SetMemberID(id int) *InsuranceUpdate {
	iu.mutation.SetMemberID(id)
	return iu
}

// SetNillableMemberID sets the Member edge to Member by id if the given value is not nil.
func (iu *InsuranceUpdate) SetNillableMemberID(id *int) *InsuranceUpdate {
	if id != nil {
		iu = iu.SetMemberID(*id)
	}
	return iu
}

// SetMember sets the Member edge to Member.
func (iu *InsuranceUpdate) SetMember(m *Member) *InsuranceUpdate {
	return iu.SetMemberID(m.ID)
}

// SetHospitalID sets the Hospital edge to Hospital by id.
func (iu *InsuranceUpdate) SetHospitalID(id int) *InsuranceUpdate {
	iu.mutation.SetHospitalID(id)
	return iu
}

// SetNillableHospitalID sets the Hospital edge to Hospital by id if the given value is not nil.
func (iu *InsuranceUpdate) SetNillableHospitalID(id *int) *InsuranceUpdate {
	if id != nil {
		iu = iu.SetHospitalID(*id)
	}
	return iu
}

// SetHospital sets the Hospital edge to Hospital.
func (iu *InsuranceUpdate) SetHospital(h *Hospital) *InsuranceUpdate {
	return iu.SetHospitalID(h.ID)
}

// SetOfficerID sets the Officer edge to Officer by id.
func (iu *InsuranceUpdate) SetOfficerID(id int) *InsuranceUpdate {
	iu.mutation.SetOfficerID(id)
	return iu
}

// SetNillableOfficerID sets the Officer edge to Officer by id if the given value is not nil.
func (iu *InsuranceUpdate) SetNillableOfficerID(id *int) *InsuranceUpdate {
	if id != nil {
		iu = iu.SetOfficerID(*id)
	}
	return iu
}

// SetOfficer sets the Officer edge to Officer.
func (iu *InsuranceUpdate) SetOfficer(o *Officer) *InsuranceUpdate {
	return iu.SetOfficerID(o.ID)
}

// SetProductID sets the Product edge to Product by id.
func (iu *InsuranceUpdate) SetProductID(id int) *InsuranceUpdate {
	iu.mutation.SetProductID(id)
	return iu
}

// SetNillableProductID sets the Product edge to Product by id if the given value is not nil.
func (iu *InsuranceUpdate) SetNillableProductID(id *int) *InsuranceUpdate {
	if id != nil {
		iu = iu.SetProductID(*id)
	}
	return iu
}

// SetProduct sets the Product edge to Product.
func (iu *InsuranceUpdate) SetProduct(p *Product) *InsuranceUpdate {
	return iu.SetProductID(p.ID)
}

// AddInsurancePaymentIDs adds the insurance_payment edge to Payment by ids.
func (iu *InsuranceUpdate) AddInsurancePaymentIDs(ids ...int) *InsuranceUpdate {
	iu.mutation.AddInsurancePaymentIDs(ids...)
	return iu
}

// AddInsurancePayment adds the insurance_payment edges to Payment.
func (iu *InsuranceUpdate) AddInsurancePayment(p ...*Payment) *InsuranceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddInsurancePaymentIDs(ids...)
}

// Mutation returns the InsuranceMutation object of the builder.
func (iu *InsuranceUpdate) Mutation() *InsuranceMutation {
	return iu.mutation
}

// ClearMember clears the Member edge to Member.
func (iu *InsuranceUpdate) ClearMember() *InsuranceUpdate {
	iu.mutation.ClearMember()
	return iu
}

// ClearHospital clears the Hospital edge to Hospital.
func (iu *InsuranceUpdate) ClearHospital() *InsuranceUpdate {
	iu.mutation.ClearHospital()
	return iu
}

// ClearOfficer clears the Officer edge to Officer.
func (iu *InsuranceUpdate) ClearOfficer() *InsuranceUpdate {
	iu.mutation.ClearOfficer()
	return iu
}

// ClearProduct clears the Product edge to Product.
func (iu *InsuranceUpdate) ClearProduct() *InsuranceUpdate {
	iu.mutation.ClearProduct()
	return iu
}

// RemoveInsurancePaymentIDs removes the insurance_payment edge to Payment by ids.
func (iu *InsuranceUpdate) RemoveInsurancePaymentIDs(ids ...int) *InsuranceUpdate {
	iu.mutation.RemoveInsurancePaymentIDs(ids...)
	return iu
}

// RemoveInsurancePayment removes insurance_payment edges to Payment.
func (iu *InsuranceUpdate) RemoveInsurancePayment(p ...*Payment) *InsuranceUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemoveInsurancePaymentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *InsuranceUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := iu.mutation.InsuranceAddress(); ok {
		if err := insurance.InsuranceAddressValidator(v); err != nil {
			return 0, &ValidationError{Name: "insurance_address", err: fmt.Errorf("ent: validator failed for field \"insurance_address\": %w", err)}
		}
	}
	if v, ok := iu.mutation.InsuranceInsurer(); ok {
		if err := insurance.InsuranceInsurerValidator(v); err != nil {
			return 0, &ValidationError{Name: "insurance_insurer", err: fmt.Errorf("ent: validator failed for field \"insurance_insurer\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InsuranceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InsuranceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InsuranceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InsuranceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InsuranceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   insurance.Table,
			Columns: insurance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: insurance.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.InsuranceAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: insurance.FieldInsuranceAddress,
		})
	}
	if value, ok := iu.mutation.InsuranceInsurer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: insurance.FieldInsuranceInsurer,
		})
	}
	if value, ok := iu.mutation.InsuranceTimeBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: insurance.FieldInsuranceTimeBuy,
		})
	}
	if value, ok := iu.mutation.InsuranceTimeFirstpay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: insurance.FieldInsuranceTimeFirstpay,
		})
	}
	if iu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.MemberTable,
			Columns: []string{insurance.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.MemberTable,
			Columns: []string{insurance.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.HospitalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.HospitalTable,
			Columns: []string{insurance.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.HospitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.HospitalTable,
			Columns: []string{insurance.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.OfficerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.OfficerTable,
			Columns: []string{insurance.OfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OfficerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.OfficerTable,
			Columns: []string{insurance.OfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.ProductTable,
			Columns: []string{insurance.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.ProductTable,
			Columns: []string{insurance.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := iu.mutation.RemovedInsurancePaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsurancePaymentTable,
			Columns: []string{insurance.InsurancePaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InsurancePaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsurancePaymentTable,
			Columns: []string{insurance.InsurancePaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insurance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InsuranceUpdateOne is the builder for updating a single Insurance entity.
type InsuranceUpdateOne struct {
	config
	hooks    []Hook
	mutation *InsuranceMutation
}

// SetInsuranceAddress sets the insurance_address field.
func (iuo *InsuranceUpdateOne) SetInsuranceAddress(s string) *InsuranceUpdateOne {
	iuo.mutation.SetInsuranceAddress(s)
	return iuo
}

// SetInsuranceInsurer sets the insurance_insurer field.
func (iuo *InsuranceUpdateOne) SetInsuranceInsurer(s string) *InsuranceUpdateOne {
	iuo.mutation.SetInsuranceInsurer(s)
	return iuo
}

// SetInsuranceTimeBuy sets the insurance_time_buy field.
func (iuo *InsuranceUpdateOne) SetInsuranceTimeBuy(t time.Time) *InsuranceUpdateOne {
	iuo.mutation.SetInsuranceTimeBuy(t)
	return iuo
}

// SetNillableInsuranceTimeBuy sets the insurance_time_buy field if the given value is not nil.
func (iuo *InsuranceUpdateOne) SetNillableInsuranceTimeBuy(t *time.Time) *InsuranceUpdateOne {
	if t != nil {
		iuo.SetInsuranceTimeBuy(*t)
	}
	return iuo
}

// SetInsuranceTimeFirstpay sets the insurance_time_firstpay field.
func (iuo *InsuranceUpdateOne) SetInsuranceTimeFirstpay(t time.Time) *InsuranceUpdateOne {
	iuo.mutation.SetInsuranceTimeFirstpay(t)
	return iuo
}

// SetNillableInsuranceTimeFirstpay sets the insurance_time_firstpay field if the given value is not nil.
func (iuo *InsuranceUpdateOne) SetNillableInsuranceTimeFirstpay(t *time.Time) *InsuranceUpdateOne {
	if t != nil {
		iuo.SetInsuranceTimeFirstpay(*t)
	}
	return iuo
}

// SetMemberID sets the Member edge to Member by id.
func (iuo *InsuranceUpdateOne) SetMemberID(id int) *InsuranceUpdateOne {
	iuo.mutation.SetMemberID(id)
	return iuo
}

// SetNillableMemberID sets the Member edge to Member by id if the given value is not nil.
func (iuo *InsuranceUpdateOne) SetNillableMemberID(id *int) *InsuranceUpdateOne {
	if id != nil {
		iuo = iuo.SetMemberID(*id)
	}
	return iuo
}

// SetMember sets the Member edge to Member.
func (iuo *InsuranceUpdateOne) SetMember(m *Member) *InsuranceUpdateOne {
	return iuo.SetMemberID(m.ID)
}

// SetHospitalID sets the Hospital edge to Hospital by id.
func (iuo *InsuranceUpdateOne) SetHospitalID(id int) *InsuranceUpdateOne {
	iuo.mutation.SetHospitalID(id)
	return iuo
}

// SetNillableHospitalID sets the Hospital edge to Hospital by id if the given value is not nil.
func (iuo *InsuranceUpdateOne) SetNillableHospitalID(id *int) *InsuranceUpdateOne {
	if id != nil {
		iuo = iuo.SetHospitalID(*id)
	}
	return iuo
}

// SetHospital sets the Hospital edge to Hospital.
func (iuo *InsuranceUpdateOne) SetHospital(h *Hospital) *InsuranceUpdateOne {
	return iuo.SetHospitalID(h.ID)
}

// SetOfficerID sets the Officer edge to Officer by id.
func (iuo *InsuranceUpdateOne) SetOfficerID(id int) *InsuranceUpdateOne {
	iuo.mutation.SetOfficerID(id)
	return iuo
}

// SetNillableOfficerID sets the Officer edge to Officer by id if the given value is not nil.
func (iuo *InsuranceUpdateOne) SetNillableOfficerID(id *int) *InsuranceUpdateOne {
	if id != nil {
		iuo = iuo.SetOfficerID(*id)
	}
	return iuo
}

// SetOfficer sets the Officer edge to Officer.
func (iuo *InsuranceUpdateOne) SetOfficer(o *Officer) *InsuranceUpdateOne {
	return iuo.SetOfficerID(o.ID)
}

// SetProductID sets the Product edge to Product by id.
func (iuo *InsuranceUpdateOne) SetProductID(id int) *InsuranceUpdateOne {
	iuo.mutation.SetProductID(id)
	return iuo
}

// SetNillableProductID sets the Product edge to Product by id if the given value is not nil.
func (iuo *InsuranceUpdateOne) SetNillableProductID(id *int) *InsuranceUpdateOne {
	if id != nil {
		iuo = iuo.SetProductID(*id)
	}
	return iuo
}

// SetProduct sets the Product edge to Product.
func (iuo *InsuranceUpdateOne) SetProduct(p *Product) *InsuranceUpdateOne {
	return iuo.SetProductID(p.ID)
}

// AddInsurancePaymentIDs adds the insurance_payment edge to Payment by ids.
func (iuo *InsuranceUpdateOne) AddInsurancePaymentIDs(ids ...int) *InsuranceUpdateOne {
	iuo.mutation.AddInsurancePaymentIDs(ids...)
	return iuo
}

// AddInsurancePayment adds the insurance_payment edges to Payment.
func (iuo *InsuranceUpdateOne) AddInsurancePayment(p ...*Payment) *InsuranceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddInsurancePaymentIDs(ids...)
}

// Mutation returns the InsuranceMutation object of the builder.
func (iuo *InsuranceUpdateOne) Mutation() *InsuranceMutation {
	return iuo.mutation
}

// ClearMember clears the Member edge to Member.
func (iuo *InsuranceUpdateOne) ClearMember() *InsuranceUpdateOne {
	iuo.mutation.ClearMember()
	return iuo
}

// ClearHospital clears the Hospital edge to Hospital.
func (iuo *InsuranceUpdateOne) ClearHospital() *InsuranceUpdateOne {
	iuo.mutation.ClearHospital()
	return iuo
}

// ClearOfficer clears the Officer edge to Officer.
func (iuo *InsuranceUpdateOne) ClearOfficer() *InsuranceUpdateOne {
	iuo.mutation.ClearOfficer()
	return iuo
}

// ClearProduct clears the Product edge to Product.
func (iuo *InsuranceUpdateOne) ClearProduct() *InsuranceUpdateOne {
	iuo.mutation.ClearProduct()
	return iuo
}

// RemoveInsurancePaymentIDs removes the insurance_payment edge to Payment by ids.
func (iuo *InsuranceUpdateOne) RemoveInsurancePaymentIDs(ids ...int) *InsuranceUpdateOne {
	iuo.mutation.RemoveInsurancePaymentIDs(ids...)
	return iuo
}

// RemoveInsurancePayment removes insurance_payment edges to Payment.
func (iuo *InsuranceUpdateOne) RemoveInsurancePayment(p ...*Payment) *InsuranceUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemoveInsurancePaymentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (iuo *InsuranceUpdateOne) Save(ctx context.Context) (*Insurance, error) {
	if v, ok := iuo.mutation.InsuranceAddress(); ok {
		if err := insurance.InsuranceAddressValidator(v); err != nil {
			return nil, &ValidationError{Name: "insurance_address", err: fmt.Errorf("ent: validator failed for field \"insurance_address\": %w", err)}
		}
	}
	if v, ok := iuo.mutation.InsuranceInsurer(); ok {
		if err := insurance.InsuranceInsurerValidator(v); err != nil {
			return nil, &ValidationError{Name: "insurance_insurer", err: fmt.Errorf("ent: validator failed for field \"insurance_insurer\": %w", err)}
		}
	}

	var (
		err  error
		node *Insurance
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InsuranceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InsuranceUpdateOne) SaveX(ctx context.Context) *Insurance {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *InsuranceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InsuranceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InsuranceUpdateOne) sqlSave(ctx context.Context) (i *Insurance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   insurance.Table,
			Columns: insurance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: insurance.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Insurance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.InsuranceAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: insurance.FieldInsuranceAddress,
		})
	}
	if value, ok := iuo.mutation.InsuranceInsurer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: insurance.FieldInsuranceInsurer,
		})
	}
	if value, ok := iuo.mutation.InsuranceTimeBuy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: insurance.FieldInsuranceTimeBuy,
		})
	}
	if value, ok := iuo.mutation.InsuranceTimeFirstpay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: insurance.FieldInsuranceTimeFirstpay,
		})
	}
	if iuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.MemberTable,
			Columns: []string{insurance.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.MemberTable,
			Columns: []string{insurance.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.HospitalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.HospitalTable,
			Columns: []string{insurance.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.HospitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.HospitalTable,
			Columns: []string{insurance.HospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.OfficerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.OfficerTable,
			Columns: []string{insurance.OfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OfficerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.OfficerTable,
			Columns: []string{insurance.OfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.ProductTable,
			Columns: []string{insurance.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   insurance.ProductTable,
			Columns: []string{insurance.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := iuo.mutation.RemovedInsurancePaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsurancePaymentTable,
			Columns: []string{insurance.InsurancePaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InsurancePaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsurancePaymentTable,
			Columns: []string{insurance.InsurancePaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	i = &Insurance{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insurance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
