// Code generated by entc, DO NOT EDIT.

package inquiry

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team05/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// InquiryMessages applies equality check predicate on the "Inquiry_messages" field. It's identical to InquiryMessagesEQ.
func InquiryMessages(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInquiryMessages), v))
	})
}

// InquiryTimeMessages applies equality check predicate on the "Inquiry_time_messages" field. It's identical to InquiryTimeMessagesEQ.
func InquiryTimeMessages(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInquiryTimeMessages), v))
	})
}

// InquiryMessagesEQ applies the EQ predicate on the "Inquiry_messages" field.
func InquiryMessagesEQ(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesNEQ applies the NEQ predicate on the "Inquiry_messages" field.
func InquiryMessagesNEQ(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesIn applies the In predicate on the "Inquiry_messages" field.
func InquiryMessagesIn(vs ...string) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInquiryMessages), v...))
	})
}

// InquiryMessagesNotIn applies the NotIn predicate on the "Inquiry_messages" field.
func InquiryMessagesNotIn(vs ...string) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInquiryMessages), v...))
	})
}

// InquiryMessagesGT applies the GT predicate on the "Inquiry_messages" field.
func InquiryMessagesGT(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesGTE applies the GTE predicate on the "Inquiry_messages" field.
func InquiryMessagesGTE(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesLT applies the LT predicate on the "Inquiry_messages" field.
func InquiryMessagesLT(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesLTE applies the LTE predicate on the "Inquiry_messages" field.
func InquiryMessagesLTE(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesContains applies the Contains predicate on the "Inquiry_messages" field.
func InquiryMessagesContains(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesHasPrefix applies the HasPrefix predicate on the "Inquiry_messages" field.
func InquiryMessagesHasPrefix(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesHasSuffix applies the HasSuffix predicate on the "Inquiry_messages" field.
func InquiryMessagesHasSuffix(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesEqualFold applies the EqualFold predicate on the "Inquiry_messages" field.
func InquiryMessagesEqualFold(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInquiryMessages), v))
	})
}

// InquiryMessagesContainsFold applies the ContainsFold predicate on the "Inquiry_messages" field.
func InquiryMessagesContainsFold(v string) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInquiryMessages), v))
	})
}

// InquiryTimeMessagesEQ applies the EQ predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesEQ(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInquiryTimeMessages), v))
	})
}

// InquiryTimeMessagesNEQ applies the NEQ predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesNEQ(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInquiryTimeMessages), v))
	})
}

// InquiryTimeMessagesIn applies the In predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesIn(vs ...time.Time) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInquiryTimeMessages), v...))
	})
}

// InquiryTimeMessagesNotIn applies the NotIn predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesNotIn(vs ...time.Time) predicate.Inquiry {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Inquiry(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInquiryTimeMessages), v...))
	})
}

// InquiryTimeMessagesGT applies the GT predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesGT(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInquiryTimeMessages), v))
	})
}

// InquiryTimeMessagesGTE applies the GTE predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesGTE(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInquiryTimeMessages), v))
	})
}

// InquiryTimeMessagesLT applies the LT predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesLT(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInquiryTimeMessages), v))
	})
}

// InquiryTimeMessagesLTE applies the LTE predicate on the "Inquiry_time_messages" field.
func InquiryTimeMessagesLTE(v time.Time) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInquiryTimeMessages), v))
	})
}

// HasMember applies the HasEdge predicate on the "Member" edge.
func HasMember() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "Member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategory applies the HasEdge predicate on the "Category" edge.
func HasCategory() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CategoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "Category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CategoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOfficer applies the HasEdge predicate on the "Officer" edge.
func HasOfficer() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOfficerWith applies the HasEdge predicate on the "Officer" edge with a given conditions (other predicates).
func HasOfficerWith(preds ...predicate.Officer) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "Product" edge.
func HasProduct() predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "Product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inquiry) predicate.Inquiry {
	return predicate.Inquiry(func(s *sql.Selector) {
		p(s.Not())
	})
}
