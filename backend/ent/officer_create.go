// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/inquiry"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/payback"
	"github.com/sut63/team05/ent/product"
	"github.com/sut63/team05/ent/recordinsurance"
)

// OfficerCreate is the builder for creating a Officer entity.
type OfficerCreate struct {
	config
	mutation *OfficerMutation
	hooks    []Hook
}

// SetOfficerEmail sets the officer_email field.
func (oc *OfficerCreate) SetOfficerEmail(s string) *OfficerCreate {
	oc.mutation.SetOfficerEmail(s)
	return oc
}

// SetOfficerName sets the officer_name field.
func (oc *OfficerCreate) SetOfficerName(s string) *OfficerCreate {
	oc.mutation.SetOfficerName(s)
	return oc
}

// SetOfficerPassword sets the officer_password field.
func (oc *OfficerCreate) SetOfficerPassword(s string) *OfficerCreate {
	oc.mutation.SetOfficerPassword(s)
	return oc
}

// AddOfficerProductIDs adds the officer_product edge to Product by ids.
func (oc *OfficerCreate) AddOfficerProductIDs(ids ...int) *OfficerCreate {
	oc.mutation.AddOfficerProductIDs(ids...)
	return oc
}

// AddOfficerProduct adds the officer_product edges to Product.
func (oc *OfficerCreate) AddOfficerProduct(p ...*Product) *OfficerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddOfficerProductIDs(ids...)
}

// AddOfficerInsuranceIDs adds the officer_insurance edge to Insurance by ids.
func (oc *OfficerCreate) AddOfficerInsuranceIDs(ids ...int) *OfficerCreate {
	oc.mutation.AddOfficerInsuranceIDs(ids...)
	return oc
}

// AddOfficerInsurance adds the officer_insurance edges to Insurance.
func (oc *OfficerCreate) AddOfficerInsurance(i ...*Insurance) *OfficerCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oc.AddOfficerInsuranceIDs(ids...)
}

// AddOfficerInquiryIDs adds the officer_inquiry edge to Inquiry by ids.
func (oc *OfficerCreate) AddOfficerInquiryIDs(ids ...int) *OfficerCreate {
	oc.mutation.AddOfficerInquiryIDs(ids...)
	return oc
}

// AddOfficerInquiry adds the officer_inquiry edges to Inquiry.
func (oc *OfficerCreate) AddOfficerInquiry(i ...*Inquiry) *OfficerCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oc.AddOfficerInquiryIDs(ids...)
}

// AddOfficerPaybackIDs adds the officer_payback edge to Payback by ids.
func (oc *OfficerCreate) AddOfficerPaybackIDs(ids ...int) *OfficerCreate {
	oc.mutation.AddOfficerPaybackIDs(ids...)
	return oc
}

// AddOfficerPayback adds the officer_payback edges to Payback.
func (oc *OfficerCreate) AddOfficerPayback(p ...*Payback) *OfficerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddOfficerPaybackIDs(ids...)
}

// AddOfficerRecordinsuranceIDs adds the officer_recordinsurance edge to Recordinsurance by ids.
func (oc *OfficerCreate) AddOfficerRecordinsuranceIDs(ids ...int) *OfficerCreate {
	oc.mutation.AddOfficerRecordinsuranceIDs(ids...)
	return oc
}

// AddOfficerRecordinsurance adds the officer_recordinsurance edges to Recordinsurance.
func (oc *OfficerCreate) AddOfficerRecordinsurance(r ...*Recordinsurance) *OfficerCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return oc.AddOfficerRecordinsuranceIDs(ids...)
}

// Mutation returns the OfficerMutation object of the builder.
func (oc *OfficerCreate) Mutation() *OfficerMutation {
	return oc.mutation
}

// Save creates the Officer in the database.
func (oc *OfficerCreate) Save(ctx context.Context) (*Officer, error) {
	if _, ok := oc.mutation.OfficerEmail(); !ok {
		return nil, &ValidationError{Name: "officer_email", err: errors.New("ent: missing required field \"officer_email\"")}
	}
	if v, ok := oc.mutation.OfficerEmail(); ok {
		if err := officer.OfficerEmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "officer_email", err: fmt.Errorf("ent: validator failed for field \"officer_email\": %w", err)}
		}
	}
	if _, ok := oc.mutation.OfficerName(); !ok {
		return nil, &ValidationError{Name: "officer_name", err: errors.New("ent: missing required field \"officer_name\"")}
	}
	if v, ok := oc.mutation.OfficerName(); ok {
		if err := officer.OfficerNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "officer_name", err: fmt.Errorf("ent: validator failed for field \"officer_name\": %w", err)}
		}
	}
	if _, ok := oc.mutation.OfficerPassword(); !ok {
		return nil, &ValidationError{Name: "officer_password", err: errors.New("ent: missing required field \"officer_password\"")}
	}
	if v, ok := oc.mutation.OfficerPassword(); ok {
		if err := officer.OfficerPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "officer_password", err: fmt.Errorf("ent: validator failed for field \"officer_password\": %w", err)}
		}
	}
	var (
		err  error
		node *Officer
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OfficerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OfficerCreate) SaveX(ctx context.Context) *Officer {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OfficerCreate) sqlSave(ctx context.Context) (*Officer, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *OfficerCreate) createSpec() (*Officer, *sqlgraph.CreateSpec) {
	var (
		o     = &Officer{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: officer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: officer.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.OfficerEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerEmail,
		})
		o.OfficerEmail = value
	}
	if value, ok := oc.mutation.OfficerName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerName,
		})
		o.OfficerName = value
	}
	if value, ok := oc.mutation.OfficerPassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerPassword,
		})
		o.OfficerPassword = value
	}
	if nodes := oc.mutation.OfficerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerProductTable,
			Columns: []string{officer.OfficerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OfficerInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInsuranceTable,
			Columns: []string{officer.OfficerInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OfficerInquiryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInquiryTable,
			Columns: []string{officer.OfficerInquiryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inquiry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OfficerPaybackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerPaybackTable,
			Columns: []string{officer.OfficerPaybackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OfficerRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerRecordinsuranceTable,
			Columns: []string{officer.OfficerRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return o, _spec
}
