// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/moneytransfer"
	"github.com/sut63/team05/ent/payment"
	"github.com/sut63/team05/ent/predicate"
)

// MoneyTransferUpdate is the builder for updating MoneyTransfer entities.
type MoneyTransferUpdate struct {
	config
	hooks      []Hook
	mutation   *MoneyTransferMutation
	predicates []predicate.MoneyTransfer
}

// Where adds a new predicate for the builder.
func (mtu *MoneyTransferUpdate) Where(ps ...predicate.MoneyTransfer) *MoneyTransferUpdate {
	mtu.predicates = append(mtu.predicates, ps...)
	return mtu
}

// SetMoneytransferType sets the moneytransfer_type field.
func (mtu *MoneyTransferUpdate) SetMoneytransferType(s string) *MoneyTransferUpdate {
	mtu.mutation.SetMoneytransferType(s)
	return mtu
}

// AddMoneytransferPaymentIDs adds the moneytransfer_payment edge to Payment by ids.
func (mtu *MoneyTransferUpdate) AddMoneytransferPaymentIDs(ids ...int) *MoneyTransferUpdate {
	mtu.mutation.AddMoneytransferPaymentIDs(ids...)
	return mtu
}

// AddMoneytransferPayment adds the moneytransfer_payment edges to Payment.
func (mtu *MoneyTransferUpdate) AddMoneytransferPayment(p ...*Payment) *MoneyTransferUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mtu.AddMoneytransferPaymentIDs(ids...)
}

// Mutation returns the MoneyTransferMutation object of the builder.
func (mtu *MoneyTransferUpdate) Mutation() *MoneyTransferMutation {
	return mtu.mutation
}

// RemoveMoneytransferPaymentIDs removes the moneytransfer_payment edge to Payment by ids.
func (mtu *MoneyTransferUpdate) RemoveMoneytransferPaymentIDs(ids ...int) *MoneyTransferUpdate {
	mtu.mutation.RemoveMoneytransferPaymentIDs(ids...)
	return mtu
}

// RemoveMoneytransferPayment removes moneytransfer_payment edges to Payment.
func (mtu *MoneyTransferUpdate) RemoveMoneytransferPayment(p ...*Payment) *MoneyTransferUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mtu.RemoveMoneytransferPaymentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mtu *MoneyTransferUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := mtu.mutation.MoneytransferType(); ok {
		if err := moneytransfer.MoneytransferTypeValidator(v); err != nil {
			return 0, &ValidationError{Name: "moneytransfer_type", err: fmt.Errorf("ent: validator failed for field \"moneytransfer_type\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(mtu.hooks) == 0 {
		affected, err = mtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MoneyTransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtu.mutation = mutation
			affected, err = mtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mtu.hooks) - 1; i >= 0; i-- {
			mut = mtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtu *MoneyTransferUpdate) SaveX(ctx context.Context) int {
	affected, err := mtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mtu *MoneyTransferUpdate) Exec(ctx context.Context) error {
	_, err := mtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtu *MoneyTransferUpdate) ExecX(ctx context.Context) {
	if err := mtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtu *MoneyTransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moneytransfer.Table,
			Columns: moneytransfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moneytransfer.FieldID,
			},
		},
	}
	if ps := mtu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mtu.mutation.MoneytransferType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moneytransfer.FieldMoneytransferType,
		})
	}
	if nodes := mtu.mutation.RemovedMoneytransferPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moneytransfer.MoneytransferPaymentTable,
			Columns: []string{moneytransfer.MoneytransferPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtu.mutation.MoneytransferPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moneytransfer.MoneytransferPaymentTable,
			Columns: []string{moneytransfer.MoneytransferPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moneytransfer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MoneyTransferUpdateOne is the builder for updating a single MoneyTransfer entity.
type MoneyTransferUpdateOne struct {
	config
	hooks    []Hook
	mutation *MoneyTransferMutation
}

// SetMoneytransferType sets the moneytransfer_type field.
func (mtuo *MoneyTransferUpdateOne) SetMoneytransferType(s string) *MoneyTransferUpdateOne {
	mtuo.mutation.SetMoneytransferType(s)
	return mtuo
}

// AddMoneytransferPaymentIDs adds the moneytransfer_payment edge to Payment by ids.
func (mtuo *MoneyTransferUpdateOne) AddMoneytransferPaymentIDs(ids ...int) *MoneyTransferUpdateOne {
	mtuo.mutation.AddMoneytransferPaymentIDs(ids...)
	return mtuo
}

// AddMoneytransferPayment adds the moneytransfer_payment edges to Payment.
func (mtuo *MoneyTransferUpdateOne) AddMoneytransferPayment(p ...*Payment) *MoneyTransferUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mtuo.AddMoneytransferPaymentIDs(ids...)
}

// Mutation returns the MoneyTransferMutation object of the builder.
func (mtuo *MoneyTransferUpdateOne) Mutation() *MoneyTransferMutation {
	return mtuo.mutation
}

// RemoveMoneytransferPaymentIDs removes the moneytransfer_payment edge to Payment by ids.
func (mtuo *MoneyTransferUpdateOne) RemoveMoneytransferPaymentIDs(ids ...int) *MoneyTransferUpdateOne {
	mtuo.mutation.RemoveMoneytransferPaymentIDs(ids...)
	return mtuo
}

// RemoveMoneytransferPayment removes moneytransfer_payment edges to Payment.
func (mtuo *MoneyTransferUpdateOne) RemoveMoneytransferPayment(p ...*Payment) *MoneyTransferUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mtuo.RemoveMoneytransferPaymentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (mtuo *MoneyTransferUpdateOne) Save(ctx context.Context) (*MoneyTransfer, error) {
	if v, ok := mtuo.mutation.MoneytransferType(); ok {
		if err := moneytransfer.MoneytransferTypeValidator(v); err != nil {
			return nil, &ValidationError{Name: "moneytransfer_type", err: fmt.Errorf("ent: validator failed for field \"moneytransfer_type\": %w", err)}
		}
	}

	var (
		err  error
		node *MoneyTransfer
	)
	if len(mtuo.hooks) == 0 {
		node, err = mtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MoneyTransferMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mtuo.mutation = mutation
			node, err = mtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mtuo.hooks) - 1; i >= 0; i-- {
			mut = mtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mtuo *MoneyTransferUpdateOne) SaveX(ctx context.Context) *MoneyTransfer {
	mt, err := mtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return mt
}

// Exec executes the query on the entity.
func (mtuo *MoneyTransferUpdateOne) Exec(ctx context.Context) error {
	_, err := mtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mtuo *MoneyTransferUpdateOne) ExecX(ctx context.Context) {
	if err := mtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mtuo *MoneyTransferUpdateOne) sqlSave(ctx context.Context) (mt *MoneyTransfer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moneytransfer.Table,
			Columns: moneytransfer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moneytransfer.FieldID,
			},
		},
	}
	id, ok := mtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MoneyTransfer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mtuo.mutation.MoneytransferType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moneytransfer.FieldMoneytransferType,
		})
	}
	if nodes := mtuo.mutation.RemovedMoneytransferPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moneytransfer.MoneytransferPaymentTable,
			Columns: []string{moneytransfer.MoneytransferPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mtuo.mutation.MoneytransferPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   moneytransfer.MoneytransferPaymentTable,
			Columns: []string{moneytransfer.MoneytransferPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	mt = &MoneyTransfer{config: mtuo.config}
	_spec.Assign = mt.assignValues
	_spec.ScanValues = mt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moneytransfer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return mt, nil
}
