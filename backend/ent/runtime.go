// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/sut63/team05/ent/bank"
	"github.com/sut63/team05/ent/gender"
	"github.com/sut63/team05/ent/groupofage"
	"github.com/sut63/team05/ent/hospital"
	"github.com/sut63/team05/ent/inquiry"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/moneytransfer"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/payback"
	"github.com/sut63/team05/ent/payment"
	"github.com/sut63/team05/ent/position"
	"github.com/sut63/team05/ent/product"
	"github.com/sut63/team05/ent/recordinsurance"
	"github.com/sut63/team05/ent/schema"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	bankFields := schema.Bank{}.Fields()
	_ = bankFields
	// bankDescBankType is the schema descriptor for bank_type field.
	bankDescBankType := bankFields[0].Descriptor()
	// bank.BankTypeValidator is a validator for the "bank_type" field. It is called by the builders before save.
	bank.BankTypeValidator = bankDescBankType.Validators[0].(func(string) error)
	genderFields := schema.Gender{}.Fields()
	_ = genderFields
	// genderDescGenderName is the schema descriptor for gender_name field.
	genderDescGenderName := genderFields[0].Descriptor()
	// gender.GenderNameValidator is a validator for the "gender_name" field. It is called by the builders before save.
	gender.GenderNameValidator = genderDescGenderName.Validators[0].(func(string) error)
	groupofageFields := schema.GroupOfAge{}.Fields()
	_ = groupofageFields
	// groupofageDescGroupOfAgeName is the schema descriptor for group_of_age_name field.
	groupofageDescGroupOfAgeName := groupofageFields[0].Descriptor()
	// groupofage.GroupOfAgeNameValidator is a validator for the "group_of_age_name" field. It is called by the builders before save.
	groupofage.GroupOfAgeNameValidator = groupofageDescGroupOfAgeName.Validators[0].(func(string) error)
	// groupofageDescGroupOfAgeAge is the schema descriptor for group_of_age_age field.
	groupofageDescGroupOfAgeAge := groupofageFields[1].Descriptor()
	// groupofage.GroupOfAgeAgeValidator is a validator for the "group_of_age_age" field. It is called by the builders before save.
	groupofage.GroupOfAgeAgeValidator = groupofageDescGroupOfAgeAge.Validators[0].(func(string) error)
	hospitalFields := schema.Hospital{}.Fields()
	_ = hospitalFields
	// hospitalDescHospitalName is the schema descriptor for hospital_name field.
	hospitalDescHospitalName := hospitalFields[0].Descriptor()
	// hospital.HospitalNameValidator is a validator for the "hospital_name" field. It is called by the builders before save.
	hospital.HospitalNameValidator = hospitalDescHospitalName.Validators[0].(func(string) error)
	inquiryFields := schema.Inquiry{}.Fields()
	_ = inquiryFields
	// inquiryDescInquiryNameMessages is the schema descriptor for Inquiry_name_messages field.
	inquiryDescInquiryNameMessages := inquiryFields[0].Descriptor()
	// inquiry.InquiryNameMessagesValidator is a validator for the "Inquiry_name_messages" field. It is called by the builders before save.
	inquiry.InquiryNameMessagesValidator = func() func(string) error {
		validators := inquiryDescInquiryNameMessages.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(_Inquiry_name_messages string) error {
			for _, fn := range fns {
				if err := fn(_Inquiry_name_messages); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// inquiryDescInquiryPhoneMessages is the schema descriptor for Inquiry_phone_messages field.
	inquiryDescInquiryPhoneMessages := inquiryFields[1].Descriptor()
	// inquiry.InquiryPhoneMessagesValidator is a validator for the "Inquiry_phone_messages" field. It is called by the builders before save.
	inquiry.InquiryPhoneMessagesValidator = func() func(string) error {
		validators := inquiryDescInquiryPhoneMessages.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
			validators[4].(func(string) error),
		}
		return func(_Inquiry_phone_messages string) error {
			for _, fn := range fns {
				if err := fn(_Inquiry_phone_messages); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// inquiryDescInquiryAgeMessages is the schema descriptor for Inquiry_age_messages field.
	inquiryDescInquiryAgeMessages := inquiryFields[2].Descriptor()
	// inquiry.InquiryAgeMessagesValidator is a validator for the "Inquiry_age_messages" field. It is called by the builders before save.
	inquiry.InquiryAgeMessagesValidator = inquiryDescInquiryAgeMessages.Validators[0].(func(int) error)
	// inquiryDescInquiryMessages is the schema descriptor for Inquiry_messages field.
	inquiryDescInquiryMessages := inquiryFields[3].Descriptor()
	// inquiry.InquiryMessagesValidator is a validator for the "Inquiry_messages" field. It is called by the builders before save.
	inquiry.InquiryMessagesValidator = func() func(string) error {
		validators := inquiryDescInquiryMessages.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_Inquiry_messages string) error {
			for _, fn := range fns {
				if err := fn(_Inquiry_messages); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// inquiryDescInquiryTimeMessages is the schema descriptor for Inquiry_time_messages field.
	inquiryDescInquiryTimeMessages := inquiryFields[4].Descriptor()
	// inquiry.DefaultInquiryTimeMessages holds the default value on creation for the Inquiry_time_messages field.
	inquiry.DefaultInquiryTimeMessages = inquiryDescInquiryTimeMessages.Default.(func() time.Time)
	insuranceFields := schema.Insurance{}.Fields()
	_ = insuranceFields
	// insuranceDescInsuranceIdentification is the schema descriptor for insurance_identification field.
	insuranceDescInsuranceIdentification := insuranceFields[0].Descriptor()
	// insurance.InsuranceIdentificationValidator is a validator for the "insurance_identification" field. It is called by the builders before save.
	insurance.InsuranceIdentificationValidator = func() func(string) error {
		validators := insuranceDescInsuranceIdentification.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(insurance_identification string) error {
			for _, fn := range fns {
				if err := fn(insurance_identification); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// insuranceDescInsuranceInsurer is the schema descriptor for insurance_insurer field.
	insuranceDescInsuranceInsurer := insuranceFields[1].Descriptor()
	// insurance.InsuranceInsurerValidator is a validator for the "insurance_insurer" field. It is called by the builders before save.
	insurance.InsuranceInsurerValidator = func() func(string) error {
		validators := insuranceDescInsuranceInsurer.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(insurance_insurer string) error {
			for _, fn := range fns {
				if err := fn(insurance_insurer); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// insuranceDescInsuranceAddress is the schema descriptor for insurance_address field.
	insuranceDescInsuranceAddress := insuranceFields[2].Descriptor()
	// insurance.InsuranceAddressValidator is a validator for the "insurance_address" field. It is called by the builders before save.
	insurance.InsuranceAddressValidator = func() func(string) error {
		validators := insuranceDescInsuranceAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(insurance_address string) error {
			for _, fn := range fns {
				if err := fn(insurance_address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// insuranceDescInsuranceTimeBuy is the schema descriptor for insurance_time_buy field.
	insuranceDescInsuranceTimeBuy := insuranceFields[3].Descriptor()
	// insurance.DefaultInsuranceTimeBuy holds the default value on creation for the insurance_time_buy field.
	insurance.DefaultInsuranceTimeBuy = insuranceDescInsuranceTimeBuy.Default.(func() time.Time)
	memberFields := schema.Member{}.Fields()
	_ = memberFields
	// memberDescMemberEmail is the schema descriptor for member_email field.
	memberDescMemberEmail := memberFields[0].Descriptor()
	// member.MemberEmailValidator is a validator for the "member_email" field. It is called by the builders before save.
	member.MemberEmailValidator = memberDescMemberEmail.Validators[0].(func(string) error)
	// memberDescMemberName is the schema descriptor for member_name field.
	memberDescMemberName := memberFields[1].Descriptor()
	// member.MemberNameValidator is a validator for the "member_name" field. It is called by the builders before save.
	member.MemberNameValidator = memberDescMemberName.Validators[0].(func(string) error)
	// memberDescMemberPassword is the schema descriptor for member_password field.
	memberDescMemberPassword := memberFields[2].Descriptor()
	// member.MemberPasswordValidator is a validator for the "member_password" field. It is called by the builders before save.
	member.MemberPasswordValidator = memberDescMemberPassword.Validators[0].(func(string) error)
	moneytransferFields := schema.Moneytransfer{}.Fields()
	_ = moneytransferFields
	// moneytransferDescMoneytransferType is the schema descriptor for moneytransfer_type field.
	moneytransferDescMoneytransferType := moneytransferFields[0].Descriptor()
	// moneytransfer.MoneytransferTypeValidator is a validator for the "moneytransfer_type" field. It is called by the builders before save.
	moneytransfer.MoneytransferTypeValidator = moneytransferDescMoneytransferType.Validators[0].(func(string) error)
	officerFields := schema.Officer{}.Fields()
	_ = officerFields
	// officerDescOfficerEmail is the schema descriptor for officer_email field.
	officerDescOfficerEmail := officerFields[0].Descriptor()
	// officer.OfficerEmailValidator is a validator for the "officer_email" field. It is called by the builders before save.
	officer.OfficerEmailValidator = officerDescOfficerEmail.Validators[0].(func(string) error)
	// officerDescOfficerName is the schema descriptor for officer_name field.
	officerDescOfficerName := officerFields[1].Descriptor()
	// officer.OfficerNameValidator is a validator for the "officer_name" field. It is called by the builders before save.
	officer.OfficerNameValidator = officerDescOfficerName.Validators[0].(func(string) error)
	// officerDescOfficerPassword is the schema descriptor for officer_password field.
	officerDescOfficerPassword := officerFields[2].Descriptor()
	// officer.OfficerPasswordValidator is a validator for the "officer_password" field. It is called by the builders before save.
	officer.OfficerPasswordValidator = officerDescOfficerPassword.Validators[0].(func(string) error)
	paybackFields := schema.Payback{}.Fields()
	_ = paybackFields
	// paybackDescPaybackTransfertime is the schema descriptor for payback_transfertime field.
	paybackDescPaybackTransfertime := paybackFields[0].Descriptor()
	// payback.DefaultPaybackTransfertime holds the default value on creation for the payback_transfertime field.
	payback.DefaultPaybackTransfertime = paybackDescPaybackTransfertime.Default.(func() time.Time)
	// paybackDescPaybackAccountnumber is the schema descriptor for payback_accountnumber field.
	paybackDescPaybackAccountnumber := paybackFields[1].Descriptor()
	// payback.PaybackAccountnumberValidator is a validator for the "payback_accountnumber" field. It is called by the builders before save.
	payback.PaybackAccountnumberValidator = func() func(string) error {
		validators := paybackDescPaybackAccountnumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(payback_accountnumber string) error {
			for _, fn := range fns {
				if err := fn(payback_accountnumber); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// paybackDescPaybackAccountname is the schema descriptor for payback_accountname field.
	paybackDescPaybackAccountname := paybackFields[2].Descriptor()
	// payback.PaybackAccountnameValidator is a validator for the "payback_accountname" field. It is called by the builders before save.
	payback.PaybackAccountnameValidator = func() func(string) error {
		validators := paybackDescPaybackAccountname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(payback_accountname string) error {
			for _, fn := range fns {
				if err := fn(payback_accountname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// paybackDescPaybackAccountiden is the schema descriptor for payback_accountiden field.
	paybackDescPaybackAccountiden := paybackFields[3].Descriptor()
	// payback.PaybackAccountidenValidator is a validator for the "payback_accountiden" field. It is called by the builders before save.
	payback.PaybackAccountidenValidator = func() func(string) error {
		validators := paybackDescPaybackAccountiden.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(payback_accountiden string) error {
			for _, fn := range fns {
				if err := fn(payback_accountiden); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	paymentFields := schema.Payment{}.Fields()
	_ = paymentFields
	// paymentDescAccountName is the schema descriptor for account_name field.
	paymentDescAccountName := paymentFields[0].Descriptor()
	// payment.AccountNameValidator is a validator for the "account_name" field. It is called by the builders before save.
	payment.AccountNameValidator = paymentDescAccountName.Validators[0].(func(string) error)
	// paymentDescAccountNumber is the schema descriptor for account_number field.
	paymentDescAccountNumber := paymentFields[1].Descriptor()
	// payment.AccountNumberValidator is a validator for the "account_number" field. It is called by the builders before save.
	payment.AccountNumberValidator = func() func(string) error {
		validators := paymentDescAccountNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(account_number string) error {
			for _, fn := range fns {
				if err := fn(account_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// paymentDescPhoneNumber is the schema descriptor for phone_number field.
	paymentDescPhoneNumber := paymentFields[2].Descriptor()
	// payment.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	payment.PhoneNumberValidator = func() func(string) error {
		validators := paymentDescPhoneNumber.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(phone_number string) error {
			for _, fn := range fns {
				if err := fn(phone_number); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// paymentDescPrice is the schema descriptor for price field.
	paymentDescPrice := paymentFields[3].Descriptor()
	// payment.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	payment.PriceValidator = func() func(float64) error {
		validators := paymentDescPrice.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(price float64) error {
			for _, fn := range fns {
				if err := fn(price); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// paymentDescTransferTime is the schema descriptor for transfer_time field.
	paymentDescTransferTime := paymentFields[4].Descriptor()
	// payment.DefaultTransferTime holds the default value on creation for the transfer_time field.
	payment.DefaultTransferTime = paymentDescTransferTime.Default.(func() time.Time)
	positionFields := schema.Position{}.Fields()
	_ = positionFields
	// positionDescPositionName is the schema descriptor for position_name field.
	positionDescPositionName := positionFields[0].Descriptor()
	// position.PositionNameValidator is a validator for the "position_name" field. It is called by the builders before save.
	position.PositionNameValidator = positionDescPositionName.Validators[0].(func(string) error)
	productFields := schema.Product{}.Fields()
	_ = productFields
	// productDescProductName is the schema descriptor for product_name field.
	productDescProductName := productFields[0].Descriptor()
	// product.ProductNameValidator is a validator for the "product_name" field. It is called by the builders before save.
	product.ProductNameValidator = func() func(string) error {
		validators := productDescProductName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(product_name string) error {
			for _, fn := range fns {
				if err := fn(product_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// productDescProductPrice is the schema descriptor for product_price field.
	productDescProductPrice := productFields[1].Descriptor()
	// product.ProductPriceValidator is a validator for the "product_price" field. It is called by the builders before save.
	product.ProductPriceValidator = productDescProductPrice.Validators[0].(func(int) error)
	// productDescProductTime is the schema descriptor for product_time field.
	productDescProductTime := productFields[2].Descriptor()
	// product.ProductTimeValidator is a validator for the "product_time" field. It is called by the builders before save.
	product.ProductTimeValidator = func() func(int) error {
		validators := productDescProductTime.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(product_time int) error {
			for _, fn := range fns {
				if err := fn(product_time); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// productDescProductPaymentOfYear is the schema descriptor for product_payment_of_year field.
	productDescProductPaymentOfYear := productFields[3].Descriptor()
	// product.ProductPaymentOfYearValidator is a validator for the "product_payment_of_year" field. It is called by the builders before save.
	product.ProductPaymentOfYearValidator = productDescProductPaymentOfYear.Validators[0].(func(int) error)
	recordinsuranceFields := schema.Recordinsurance{}.Fields()
	_ = recordinsuranceFields
	// recordinsuranceDescNumberOfDaysOfTreat is the schema descriptor for number_of_days_of_treat field.
	recordinsuranceDescNumberOfDaysOfTreat := recordinsuranceFields[0].Descriptor()
	// recordinsurance.NumberOfDaysOfTreatValidator is a validator for the "number_of_days_of_treat" field. It is called by the builders before save.
	recordinsurance.NumberOfDaysOfTreatValidator = recordinsuranceDescNumberOfDaysOfTreat.Validators[0].(func(int) error)
	// recordinsuranceDescRecordinsuranceContact is the schema descriptor for recordinsurance_contact field.
	recordinsuranceDescRecordinsuranceContact := recordinsuranceFields[1].Descriptor()
	// recordinsurance.RecordinsuranceContactValidator is a validator for the "recordinsurance_contact" field. It is called by the builders before save.
	recordinsurance.RecordinsuranceContactValidator = func() func(string) error {
		validators := recordinsuranceDescRecordinsuranceContact.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
			validators[3].(func(string) error),
		}
		return func(recordinsurance_contact string) error {
			for _, fn := range fns {
				if err := fn(recordinsurance_contact); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// recordinsuranceDescRecordinsuranceAddress is the schema descriptor for recordinsurance_address field.
	recordinsuranceDescRecordinsuranceAddress := recordinsuranceFields[2].Descriptor()
	// recordinsurance.RecordinsuranceAddressValidator is a validator for the "recordinsurance_address" field. It is called by the builders before save.
	recordinsurance.RecordinsuranceAddressValidator = func() func(string) error {
		validators := recordinsuranceDescRecordinsuranceAddress.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(recordinsurance_address string) error {
			for _, fn := range fns {
				if err := fn(recordinsurance_address); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// recordinsuranceDescRecordinsuranceTime is the schema descriptor for recordinsurance_time field.
	recordinsuranceDescRecordinsuranceTime := recordinsuranceFields[3].Descriptor()
	// recordinsurance.DefaultRecordinsuranceTime holds the default value on creation for the recordinsurance_time field.
	recordinsurance.DefaultRecordinsuranceTime = recordinsuranceDescRecordinsuranceTime.Default.(func() time.Time)
}
