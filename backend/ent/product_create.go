// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/gender"
	"github.com/sut63/team05/ent/groupofage"
	"github.com/sut63/team05/ent/inquiry"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/payback"
	"github.com/sut63/team05/ent/product"
	"github.com/sut63/team05/ent/recordinsurance"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetProductName sets the product_name field.
func (pc *ProductCreate) SetProductName(s string) *ProductCreate {
	pc.mutation.SetProductName(s)
	return pc
}

// SetProductPrice sets the product_price field.
func (pc *ProductCreate) SetProductPrice(i int) *ProductCreate {
	pc.mutation.SetProductPrice(i)
	return pc
}

// SetProductTime sets the product_time field.
func (pc *ProductCreate) SetProductTime(i int) *ProductCreate {
	pc.mutation.SetProductTime(i)
	return pc
}

// SetProductPaymentOfYear sets the product_payment_of_year field.
func (pc *ProductCreate) SetProductPaymentOfYear(i int) *ProductCreate {
	pc.mutation.SetProductPaymentOfYear(i)
	return pc
}

// SetGenderID sets the gender edge to Gender by id.
func (pc *ProductCreate) SetGenderID(id int) *ProductCreate {
	pc.mutation.SetGenderID(id)
	return pc
}

// SetNillableGenderID sets the gender edge to Gender by id if the given value is not nil.
func (pc *ProductCreate) SetNillableGenderID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetGenderID(*id)
	}
	return pc
}

// SetGender sets the gender edge to Gender.
func (pc *ProductCreate) SetGender(g *Gender) *ProductCreate {
	return pc.SetGenderID(g.ID)
}

// SetGroupofageID sets the groupofage edge to GroupOfAge by id.
func (pc *ProductCreate) SetGroupofageID(id int) *ProductCreate {
	pc.mutation.SetGroupofageID(id)
	return pc
}

// SetNillableGroupofageID sets the groupofage edge to GroupOfAge by id if the given value is not nil.
func (pc *ProductCreate) SetNillableGroupofageID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetGroupofageID(*id)
	}
	return pc
}

// SetGroupofage sets the groupofage edge to GroupOfAge.
func (pc *ProductCreate) SetGroupofage(g *GroupOfAge) *ProductCreate {
	return pc.SetGroupofageID(g.ID)
}

// SetOfficerID sets the officer edge to Officer by id.
func (pc *ProductCreate) SetOfficerID(id int) *ProductCreate {
	pc.mutation.SetOfficerID(id)
	return pc
}

// SetNillableOfficerID sets the officer edge to Officer by id if the given value is not nil.
func (pc *ProductCreate) SetNillableOfficerID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetOfficerID(*id)
	}
	return pc
}

// SetOfficer sets the officer edge to Officer.
func (pc *ProductCreate) SetOfficer(o *Officer) *ProductCreate {
	return pc.SetOfficerID(o.ID)
}

// AddProductInsuranceIDs adds the product_insurance edge to Insurance by ids.
func (pc *ProductCreate) AddProductInsuranceIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductInsuranceIDs(ids...)
	return pc
}

// AddProductInsurance adds the product_insurance edges to Insurance.
func (pc *ProductCreate) AddProductInsurance(i ...*Insurance) *ProductCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddProductInsuranceIDs(ids...)
}

// AddProductInquiryIDs adds the product_inquiry edge to Inquiry by ids.
func (pc *ProductCreate) AddProductInquiryIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductInquiryIDs(ids...)
	return pc
}

// AddProductInquiry adds the product_inquiry edges to Inquiry.
func (pc *ProductCreate) AddProductInquiry(i ...*Inquiry) *ProductCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddProductInquiryIDs(ids...)
}

// AddProductPaybackIDs adds the product_payback edge to Payback by ids.
func (pc *ProductCreate) AddProductPaybackIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductPaybackIDs(ids...)
	return pc
}

// AddProductPayback adds the product_payback edges to Payback.
func (pc *ProductCreate) AddProductPayback(p ...*Payback) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductPaybackIDs(ids...)
}

// AddProductRecordinsuranceIDs adds the product_recordinsurance edge to Recordinsurance by ids.
func (pc *ProductCreate) AddProductRecordinsuranceIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductRecordinsuranceIDs(ids...)
	return pc
}

// AddProductRecordinsurance adds the product_recordinsurance edges to Recordinsurance.
func (pc *ProductCreate) AddProductRecordinsurance(r ...*Recordinsurance) *ProductCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddProductRecordinsuranceIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	if _, ok := pc.mutation.ProductName(); !ok {
		return nil, &ValidationError{Name: "product_name", err: errors.New("ent: missing required field \"product_name\"")}
	}
	if v, ok := pc.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "product_name", err: fmt.Errorf("ent: validator failed for field \"product_name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ProductPrice(); !ok {
		return nil, &ValidationError{Name: "product_price", err: errors.New("ent: missing required field \"product_price\"")}
	}
	if v, ok := pc.mutation.ProductPrice(); ok {
		if err := product.ProductPriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "product_price", err: fmt.Errorf("ent: validator failed for field \"product_price\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ProductTime(); !ok {
		return nil, &ValidationError{Name: "product_time", err: errors.New("ent: missing required field \"product_time\"")}
	}
	if v, ok := pc.mutation.ProductTime(); ok {
		if err := product.ProductTimeValidator(v); err != nil {
			return nil, &ValidationError{Name: "product_time", err: fmt.Errorf("ent: validator failed for field \"product_time\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ProductPaymentOfYear(); !ok {
		return nil, &ValidationError{Name: "product_payment_of_year", err: errors.New("ent: missing required field \"product_payment_of_year\"")}
	}
	if v, ok := pc.mutation.ProductPaymentOfYear(); ok {
		if err := product.ProductPaymentOfYearValidator(v); err != nil {
			return nil, &ValidationError{Name: "product_payment_of_year", err: fmt.Errorf("ent: validator failed for field \"product_payment_of_year\": %w", err)}
		}
	}
	var (
		err  error
		node *Product
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		pr    = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.ProductName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductName,
		})
		pr.ProductName = value
	}
	if value, ok := pc.mutation.ProductPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldProductPrice,
		})
		pr.ProductPrice = value
	}
	if value, ok := pc.mutation.ProductTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldProductTime,
		})
		pr.ProductTime = value
	}
	if value, ok := pc.mutation.ProductPaymentOfYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldProductPaymentOfYear,
		})
		pr.ProductPaymentOfYear = value
	}
	if nodes := pc.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.GenderTable,
			Columns: []string{product.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.GroupofageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.GroupofageTable,
			Columns: []string{product.GroupofageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: groupofage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OfficerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.OfficerTable,
			Columns: []string{product.OfficerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: officer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductInsuranceTable,
			Columns: []string{product.ProductInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductInquiryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductInquiryTable,
			Columns: []string{product.ProductInquiryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inquiry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductPaybackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPaybackTable,
			Columns: []string{product.ProductPaybackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductRecordinsuranceTable,
			Columns: []string{product.ProductRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
