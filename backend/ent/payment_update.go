// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/bank"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/member"
	"github.com/sut63/team05/ent/moneytransfer"
	"github.com/sut63/team05/ent/payment"
	"github.com/sut63/team05/ent/predicate"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks      []Hook
	mutation   *PaymentMutation
	predicates []predicate.Payment
}

// Where adds a new predicate for the builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetAccountName sets the account_name field.
func (pu *PaymentUpdate) SetAccountName(s string) *PaymentUpdate {
	pu.mutation.SetAccountName(s)
	return pu
}

// SetAccountNumber sets the account_number field.
func (pu *PaymentUpdate) SetAccountNumber(s string) *PaymentUpdate {
	pu.mutation.SetAccountNumber(s)
	return pu
}

// SetPhoneNumber sets the phone_number field.
func (pu *PaymentUpdate) SetPhoneNumber(s string) *PaymentUpdate {
	pu.mutation.SetPhoneNumber(s)
	return pu
}

// SetPrice sets the price field.
func (pu *PaymentUpdate) SetPrice(f float64) *PaymentUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// AddPrice adds f to price.
func (pu *PaymentUpdate) AddPrice(f float64) *PaymentUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetTransferTime sets the transfer_time field.
func (pu *PaymentUpdate) SetTransferTime(t time.Time) *PaymentUpdate {
	pu.mutation.SetTransferTime(t)
	return pu
}

// SetNillableTransferTime sets the transfer_time field if the given value is not nil.
func (pu *PaymentUpdate) SetNillableTransferTime(t *time.Time) *PaymentUpdate {
	if t != nil {
		pu.SetTransferTime(*t)
	}
	return pu
}

// SetInsuranceID sets the Insurance edge to Insurance by id.
func (pu *PaymentUpdate) SetInsuranceID(id int) *PaymentUpdate {
	pu.mutation.SetInsuranceID(id)
	return pu
}

// SetNillableInsuranceID sets the Insurance edge to Insurance by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableInsuranceID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetInsuranceID(*id)
	}
	return pu
}

// SetInsurance sets the Insurance edge to Insurance.
func (pu *PaymentUpdate) SetInsurance(i *Insurance) *PaymentUpdate {
	return pu.SetInsuranceID(i.ID)
}

// SetMoneytransferID sets the Moneytransfer edge to Moneytransfer by id.
func (pu *PaymentUpdate) SetMoneytransferID(id int) *PaymentUpdate {
	pu.mutation.SetMoneytransferID(id)
	return pu
}

// SetNillableMoneytransferID sets the Moneytransfer edge to Moneytransfer by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableMoneytransferID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetMoneytransferID(*id)
	}
	return pu
}

// SetMoneytransfer sets the Moneytransfer edge to Moneytransfer.
func (pu *PaymentUpdate) SetMoneytransfer(m *Moneytransfer) *PaymentUpdate {
	return pu.SetMoneytransferID(m.ID)
}

// SetBankID sets the Bank edge to Bank by id.
func (pu *PaymentUpdate) SetBankID(id int) *PaymentUpdate {
	pu.mutation.SetBankID(id)
	return pu
}

// SetNillableBankID sets the Bank edge to Bank by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableBankID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetBankID(*id)
	}
	return pu
}

// SetBank sets the Bank edge to Bank.
func (pu *PaymentUpdate) SetBank(b *Bank) *PaymentUpdate {
	return pu.SetBankID(b.ID)
}

// SetMemberID sets the Member edge to Member by id.
func (pu *PaymentUpdate) SetMemberID(id int) *PaymentUpdate {
	pu.mutation.SetMemberID(id)
	return pu
}

// SetNillableMemberID sets the Member edge to Member by id if the given value is not nil.
func (pu *PaymentUpdate) SetNillableMemberID(id *int) *PaymentUpdate {
	if id != nil {
		pu = pu.SetMemberID(*id)
	}
	return pu
}

// SetMember sets the Member edge to Member.
func (pu *PaymentUpdate) SetMember(m *Member) *PaymentUpdate {
	return pu.SetMemberID(m.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// ClearInsurance clears the Insurance edge to Insurance.
func (pu *PaymentUpdate) ClearInsurance() *PaymentUpdate {
	pu.mutation.ClearInsurance()
	return pu
}

// ClearMoneytransfer clears the Moneytransfer edge to Moneytransfer.
func (pu *PaymentUpdate) ClearMoneytransfer() *PaymentUpdate {
	pu.mutation.ClearMoneytransfer()
	return pu
}

// ClearBank clears the Bank edge to Bank.
func (pu *PaymentUpdate) ClearBank() *PaymentUpdate {
	pu.mutation.ClearBank()
	return pu
}

// ClearMember clears the Member edge to Member.
func (pu *PaymentUpdate) ClearMember() *PaymentUpdate {
	pu.mutation.ClearMember()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.AccountName(); ok {
		if err := payment.AccountNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "account_name", err: fmt.Errorf("ent: validator failed for field \"account_name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.AccountNumber(); ok {
		if err := payment.AccountNumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "account_number", err: fmt.Errorf("ent: validator failed for field \"account_number\": %w", err)}
		}
	}
	if v, ok := pu.mutation.PhoneNumber(); ok {
		if err := payment.PhoneNumberValidator(v); err != nil {
			return 0, &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Price(); ok {
		if err := payment.PriceValidator(v); err != nil {
			return 0, &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.AccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldAccountName,
		})
	}
	if value, ok := pu.mutation.AccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldAccountNumber,
		})
	}
	if value, ok := pu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldPhoneNumber,
		})
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPrice,
		})
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPrice,
		})
	}
	if value, ok := pu.mutation.TransferTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldTransferTime,
		})
	}
	if pu.mutation.InsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InsuranceTable,
			Columns: []string{payment.InsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InsuranceTable,
			Columns: []string{payment.InsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MoneytransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MoneytransferTable,
			Columns: []string{payment.MoneytransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moneytransfer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MoneytransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MoneytransferTable,
			Columns: []string{payment.MoneytransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moneytransfer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.BankTable,
			Columns: []string{payment.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.BankTable,
			Columns: []string{payment.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// SetAccountName sets the account_name field.
func (puo *PaymentUpdateOne) SetAccountName(s string) *PaymentUpdateOne {
	puo.mutation.SetAccountName(s)
	return puo
}

// SetAccountNumber sets the account_number field.
func (puo *PaymentUpdateOne) SetAccountNumber(s string) *PaymentUpdateOne {
	puo.mutation.SetAccountNumber(s)
	return puo
}

// SetPhoneNumber sets the phone_number field.
func (puo *PaymentUpdateOne) SetPhoneNumber(s string) *PaymentUpdateOne {
	puo.mutation.SetPhoneNumber(s)
	return puo
}

// SetPrice sets the price field.
func (puo *PaymentUpdateOne) SetPrice(f float64) *PaymentUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// AddPrice adds f to price.
func (puo *PaymentUpdateOne) AddPrice(f float64) *PaymentUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetTransferTime sets the transfer_time field.
func (puo *PaymentUpdateOne) SetTransferTime(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetTransferTime(t)
	return puo
}

// SetNillableTransferTime sets the transfer_time field if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableTransferTime(t *time.Time) *PaymentUpdateOne {
	if t != nil {
		puo.SetTransferTime(*t)
	}
	return puo
}

// SetInsuranceID sets the Insurance edge to Insurance by id.
func (puo *PaymentUpdateOne) SetInsuranceID(id int) *PaymentUpdateOne {
	puo.mutation.SetInsuranceID(id)
	return puo
}

// SetNillableInsuranceID sets the Insurance edge to Insurance by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableInsuranceID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetInsuranceID(*id)
	}
	return puo
}

// SetInsurance sets the Insurance edge to Insurance.
func (puo *PaymentUpdateOne) SetInsurance(i *Insurance) *PaymentUpdateOne {
	return puo.SetInsuranceID(i.ID)
}

// SetMoneytransferID sets the Moneytransfer edge to Moneytransfer by id.
func (puo *PaymentUpdateOne) SetMoneytransferID(id int) *PaymentUpdateOne {
	puo.mutation.SetMoneytransferID(id)
	return puo
}

// SetNillableMoneytransferID sets the Moneytransfer edge to Moneytransfer by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableMoneytransferID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetMoneytransferID(*id)
	}
	return puo
}

// SetMoneytransfer sets the Moneytransfer edge to Moneytransfer.
func (puo *PaymentUpdateOne) SetMoneytransfer(m *Moneytransfer) *PaymentUpdateOne {
	return puo.SetMoneytransferID(m.ID)
}

// SetBankID sets the Bank edge to Bank by id.
func (puo *PaymentUpdateOne) SetBankID(id int) *PaymentUpdateOne {
	puo.mutation.SetBankID(id)
	return puo
}

// SetNillableBankID sets the Bank edge to Bank by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableBankID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetBankID(*id)
	}
	return puo
}

// SetBank sets the Bank edge to Bank.
func (puo *PaymentUpdateOne) SetBank(b *Bank) *PaymentUpdateOne {
	return puo.SetBankID(b.ID)
}

// SetMemberID sets the Member edge to Member by id.
func (puo *PaymentUpdateOne) SetMemberID(id int) *PaymentUpdateOne {
	puo.mutation.SetMemberID(id)
	return puo
}

// SetNillableMemberID sets the Member edge to Member by id if the given value is not nil.
func (puo *PaymentUpdateOne) SetNillableMemberID(id *int) *PaymentUpdateOne {
	if id != nil {
		puo = puo.SetMemberID(*id)
	}
	return puo
}

// SetMember sets the Member edge to Member.
func (puo *PaymentUpdateOne) SetMember(m *Member) *PaymentUpdateOne {
	return puo.SetMemberID(m.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// ClearInsurance clears the Insurance edge to Insurance.
func (puo *PaymentUpdateOne) ClearInsurance() *PaymentUpdateOne {
	puo.mutation.ClearInsurance()
	return puo
}

// ClearMoneytransfer clears the Moneytransfer edge to Moneytransfer.
func (puo *PaymentUpdateOne) ClearMoneytransfer() *PaymentUpdateOne {
	puo.mutation.ClearMoneytransfer()
	return puo
}

// ClearBank clears the Bank edge to Bank.
func (puo *PaymentUpdateOne) ClearBank() *PaymentUpdateOne {
	puo.mutation.ClearBank()
	return puo
}

// ClearMember clears the Member edge to Member.
func (puo *PaymentUpdateOne) ClearMember() *PaymentUpdateOne {
	puo.mutation.ClearMember()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	if v, ok := puo.mutation.AccountName(); ok {
		if err := payment.AccountNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "account_name", err: fmt.Errorf("ent: validator failed for field \"account_name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.AccountNumber(); ok {
		if err := payment.AccountNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "account_number", err: fmt.Errorf("ent: validator failed for field \"account_number\": %w", err)}
		}
	}
	if v, ok := puo.mutation.PhoneNumber(); ok {
		if err := payment.PhoneNumberValidator(v); err != nil {
			return nil, &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Price(); ok {
		if err := payment.PriceValidator(v); err != nil {
			return nil, &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}

	var (
		err  error
		node *Payment
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	pa, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pa
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (pa *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Payment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.AccountName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldAccountName,
		})
	}
	if value, ok := puo.mutation.AccountNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldAccountNumber,
		})
	}
	if value, ok := puo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: payment.FieldPhoneNumber,
		})
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPrice,
		})
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: payment.FieldPrice,
		})
	}
	if value, ok := puo.mutation.TransferTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: payment.FieldTransferTime,
		})
	}
	if puo.mutation.InsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InsuranceTable,
			Columns: []string{payment.InsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.InsuranceTable,
			Columns: []string{payment.InsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MoneytransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MoneytransferTable,
			Columns: []string{payment.MoneytransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moneytransfer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MoneytransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MoneytransferTable,
			Columns: []string{payment.MoneytransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: moneytransfer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.BankTable,
			Columns: []string{payment.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.BankTable,
			Columns: []string{payment.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bank.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.MemberTable,
			Columns: []string{payment.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: member.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pa = &Payment{config: puo.config}
	_spec.Assign = pa.assignValues
	_spec.ScanValues = pa.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pa, nil
}
