// Code generated by entc, DO NOT EDIT.

package recordinsurance

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team05/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RecordinsuranceTime applies equality check predicate on the "recordinsurance_time" field. It's identical to RecordinsuranceTimeEQ.
func RecordinsuranceTime(v time.Time) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordinsuranceTime), v))
	})
}

// Amountpaid applies equality check predicate on the "amountpaid" field. It's identical to AmountpaidEQ.
func Amountpaid(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountpaid), v))
	})
}

// RecordinsuranceTimeEQ applies the EQ predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeEQ(v time.Time) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordinsuranceTime), v))
	})
}

// RecordinsuranceTimeNEQ applies the NEQ predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeNEQ(v time.Time) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordinsuranceTime), v))
	})
}

// RecordinsuranceTimeIn applies the In predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeIn(vs ...time.Time) predicate.Recordinsurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recordinsurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRecordinsuranceTime), v...))
	})
}

// RecordinsuranceTimeNotIn applies the NotIn predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeNotIn(vs ...time.Time) predicate.Recordinsurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recordinsurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRecordinsuranceTime), v...))
	})
}

// RecordinsuranceTimeGT applies the GT predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeGT(v time.Time) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordinsuranceTime), v))
	})
}

// RecordinsuranceTimeGTE applies the GTE predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeGTE(v time.Time) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordinsuranceTime), v))
	})
}

// RecordinsuranceTimeLT applies the LT predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeLT(v time.Time) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordinsuranceTime), v))
	})
}

// RecordinsuranceTimeLTE applies the LTE predicate on the "recordinsurance_time" field.
func RecordinsuranceTimeLTE(v time.Time) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordinsuranceTime), v))
	})
}

// AmountpaidEQ applies the EQ predicate on the "amountpaid" field.
func AmountpaidEQ(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidNEQ applies the NEQ predicate on the "amountpaid" field.
func AmountpaidNEQ(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidIn applies the In predicate on the "amountpaid" field.
func AmountpaidIn(vs ...string) predicate.Recordinsurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recordinsurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmountpaid), v...))
	})
}

// AmountpaidNotIn applies the NotIn predicate on the "amountpaid" field.
func AmountpaidNotIn(vs ...string) predicate.Recordinsurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recordinsurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmountpaid), v...))
	})
}

// AmountpaidGT applies the GT predicate on the "amountpaid" field.
func AmountpaidGT(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidGTE applies the GTE predicate on the "amountpaid" field.
func AmountpaidGTE(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidLT applies the LT predicate on the "amountpaid" field.
func AmountpaidLT(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidLTE applies the LTE predicate on the "amountpaid" field.
func AmountpaidLTE(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidContains applies the Contains predicate on the "amountpaid" field.
func AmountpaidContains(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidHasPrefix applies the HasPrefix predicate on the "amountpaid" field.
func AmountpaidHasPrefix(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidHasSuffix applies the HasSuffix predicate on the "amountpaid" field.
func AmountpaidHasSuffix(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidEqualFold applies the EqualFold predicate on the "amountpaid" field.
func AmountpaidEqualFold(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAmountpaid), v))
	})
}

// AmountpaidContainsFold applies the ContainsFold predicate on the "amountpaid" field.
func AmountpaidContainsFold(v string) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAmountpaid), v))
	})
}

// HasMember applies the HasEdge predicate on the "Member" edge.
func HasMember() predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "Member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MemberInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHospital applies the HasEdge predicate on the "Hospital" edge.
func HasHospital() predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HospitalTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HospitalTable, HospitalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHospitalWith applies the HasEdge predicate on the "Hospital" edge with a given conditions (other predicates).
func HasHospitalWith(preds ...predicate.Hospital) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HospitalInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HospitalTable, HospitalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOfficer applies the HasEdge predicate on the "Officer" edge.
func HasOfficer() predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOfficerWith applies the HasEdge predicate on the "Officer" edge with a given conditions (other predicates).
func HasOfficerWith(preds ...predicate.Officer) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OfficerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OfficerTable, OfficerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProduct applies the HasEdge predicate on the "Product" edge.
func HasProduct() predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "Product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Recordinsurance) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Recordinsurance) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recordinsurance) predicate.Recordinsurance {
	return predicate.Recordinsurance(func(s *sql.Selector) {
		p(s.Not())
	})
}
