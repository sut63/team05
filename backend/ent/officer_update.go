// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team05/ent/inquiry"
	"github.com/sut63/team05/ent/insurance"
	"github.com/sut63/team05/ent/officer"
	"github.com/sut63/team05/ent/payback"
	"github.com/sut63/team05/ent/predicate"
	"github.com/sut63/team05/ent/product"
	"github.com/sut63/team05/ent/recordinsurance"
)

// OfficerUpdate is the builder for updating Officer entities.
type OfficerUpdate struct {
	config
	hooks      []Hook
	mutation   *OfficerMutation
	predicates []predicate.Officer
}

// Where adds a new predicate for the builder.
func (ou *OfficerUpdate) Where(ps ...predicate.Officer) *OfficerUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOfficerEmail sets the officer_email field.
func (ou *OfficerUpdate) SetOfficerEmail(s string) *OfficerUpdate {
	ou.mutation.SetOfficerEmail(s)
	return ou
}

// SetOfficerName sets the officer_name field.
func (ou *OfficerUpdate) SetOfficerName(s string) *OfficerUpdate {
	ou.mutation.SetOfficerName(s)
	return ou
}

// SetOfficerPassword sets the officer_password field.
func (ou *OfficerUpdate) SetOfficerPassword(s string) *OfficerUpdate {
	ou.mutation.SetOfficerPassword(s)
	return ou
}

// AddOfficerProductIDs adds the officer_product edge to Product by ids.
func (ou *OfficerUpdate) AddOfficerProductIDs(ids ...int) *OfficerUpdate {
	ou.mutation.AddOfficerProductIDs(ids...)
	return ou
}

// AddOfficerProduct adds the officer_product edges to Product.
func (ou *OfficerUpdate) AddOfficerProduct(p ...*Product) *OfficerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddOfficerProductIDs(ids...)
}

// AddOfficerInsuranceIDs adds the officer_insurance edge to Insurance by ids.
func (ou *OfficerUpdate) AddOfficerInsuranceIDs(ids ...int) *OfficerUpdate {
	ou.mutation.AddOfficerInsuranceIDs(ids...)
	return ou
}

// AddOfficerInsurance adds the officer_insurance edges to Insurance.
func (ou *OfficerUpdate) AddOfficerInsurance(i ...*Insurance) *OfficerUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddOfficerInsuranceIDs(ids...)
}

// AddOfficerInquiryIDs adds the officer_inquiry edge to Inquiry by ids.
func (ou *OfficerUpdate) AddOfficerInquiryIDs(ids ...int) *OfficerUpdate {
	ou.mutation.AddOfficerInquiryIDs(ids...)
	return ou
}

// AddOfficerInquiry adds the officer_inquiry edges to Inquiry.
func (ou *OfficerUpdate) AddOfficerInquiry(i ...*Inquiry) *OfficerUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddOfficerInquiryIDs(ids...)
}

// AddOfficerPaybackIDs adds the officer_payback edge to Payback by ids.
func (ou *OfficerUpdate) AddOfficerPaybackIDs(ids ...int) *OfficerUpdate {
	ou.mutation.AddOfficerPaybackIDs(ids...)
	return ou
}

// AddOfficerPayback adds the officer_payback edges to Payback.
func (ou *OfficerUpdate) AddOfficerPayback(p ...*Payback) *OfficerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddOfficerPaybackIDs(ids...)
}

// AddOfficerRecordinsuranceIDs adds the officer_recordinsurance edge to Recordinsurance by ids.
func (ou *OfficerUpdate) AddOfficerRecordinsuranceIDs(ids ...int) *OfficerUpdate {
	ou.mutation.AddOfficerRecordinsuranceIDs(ids...)
	return ou
}

// AddOfficerRecordinsurance adds the officer_recordinsurance edges to Recordinsurance.
func (ou *OfficerUpdate) AddOfficerRecordinsurance(r ...*Recordinsurance) *OfficerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddOfficerRecordinsuranceIDs(ids...)
}

// Mutation returns the OfficerMutation object of the builder.
func (ou *OfficerUpdate) Mutation() *OfficerMutation {
	return ou.mutation
}

// RemoveOfficerProductIDs removes the officer_product edge to Product by ids.
func (ou *OfficerUpdate) RemoveOfficerProductIDs(ids ...int) *OfficerUpdate {
	ou.mutation.RemoveOfficerProductIDs(ids...)
	return ou
}

// RemoveOfficerProduct removes officer_product edges to Product.
func (ou *OfficerUpdate) RemoveOfficerProduct(p ...*Product) *OfficerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemoveOfficerProductIDs(ids...)
}

// RemoveOfficerInsuranceIDs removes the officer_insurance edge to Insurance by ids.
func (ou *OfficerUpdate) RemoveOfficerInsuranceIDs(ids ...int) *OfficerUpdate {
	ou.mutation.RemoveOfficerInsuranceIDs(ids...)
	return ou
}

// RemoveOfficerInsurance removes officer_insurance edges to Insurance.
func (ou *OfficerUpdate) RemoveOfficerInsurance(i ...*Insurance) *OfficerUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveOfficerInsuranceIDs(ids...)
}

// RemoveOfficerInquiryIDs removes the officer_inquiry edge to Inquiry by ids.
func (ou *OfficerUpdate) RemoveOfficerInquiryIDs(ids ...int) *OfficerUpdate {
	ou.mutation.RemoveOfficerInquiryIDs(ids...)
	return ou
}

// RemoveOfficerInquiry removes officer_inquiry edges to Inquiry.
func (ou *OfficerUpdate) RemoveOfficerInquiry(i ...*Inquiry) *OfficerUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveOfficerInquiryIDs(ids...)
}

// RemoveOfficerPaybackIDs removes the officer_payback edge to Payback by ids.
func (ou *OfficerUpdate) RemoveOfficerPaybackIDs(ids ...int) *OfficerUpdate {
	ou.mutation.RemoveOfficerPaybackIDs(ids...)
	return ou
}

// RemoveOfficerPayback removes officer_payback edges to Payback.
func (ou *OfficerUpdate) RemoveOfficerPayback(p ...*Payback) *OfficerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemoveOfficerPaybackIDs(ids...)
}

// RemoveOfficerRecordinsuranceIDs removes the officer_recordinsurance edge to Recordinsurance by ids.
func (ou *OfficerUpdate) RemoveOfficerRecordinsuranceIDs(ids ...int) *OfficerUpdate {
	ou.mutation.RemoveOfficerRecordinsuranceIDs(ids...)
	return ou
}

// RemoveOfficerRecordinsurance removes officer_recordinsurance edges to Recordinsurance.
func (ou *OfficerUpdate) RemoveOfficerRecordinsurance(r ...*Recordinsurance) *OfficerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveOfficerRecordinsuranceIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OfficerUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ou.mutation.OfficerEmail(); ok {
		if err := officer.OfficerEmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "officer_email", err: fmt.Errorf("ent: validator failed for field \"officer_email\": %w", err)}
		}
	}
	if v, ok := ou.mutation.OfficerName(); ok {
		if err := officer.OfficerNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "officer_name", err: fmt.Errorf("ent: validator failed for field \"officer_name\": %w", err)}
		}
	}
	if v, ok := ou.mutation.OfficerPassword(); ok {
		if err := officer.OfficerPasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "officer_password", err: fmt.Errorf("ent: validator failed for field \"officer_password\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OfficerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OfficerUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OfficerUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OfficerUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OfficerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   officer.Table,
			Columns: officer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: officer.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OfficerEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerEmail,
		})
	}
	if value, ok := ou.mutation.OfficerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerName,
		})
	}
	if value, ok := ou.mutation.OfficerPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerPassword,
		})
	}
	if nodes := ou.mutation.RemovedOfficerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerProductTable,
			Columns: []string{officer.OfficerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OfficerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerProductTable,
			Columns: []string{officer.OfficerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ou.mutation.RemovedOfficerInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInsuranceTable,
			Columns: []string{officer.OfficerInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OfficerInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInsuranceTable,
			Columns: []string{officer.OfficerInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ou.mutation.RemovedOfficerInquiryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInquiryTable,
			Columns: []string{officer.OfficerInquiryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inquiry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OfficerInquiryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInquiryTable,
			Columns: []string{officer.OfficerInquiryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inquiry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ou.mutation.RemovedOfficerPaybackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerPaybackTable,
			Columns: []string{officer.OfficerPaybackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OfficerPaybackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerPaybackTable,
			Columns: []string{officer.OfficerPaybackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ou.mutation.RemovedOfficerRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerRecordinsuranceTable,
			Columns: []string{officer.OfficerRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OfficerRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerRecordinsuranceTable,
			Columns: []string{officer.OfficerRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{officer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OfficerUpdateOne is the builder for updating a single Officer entity.
type OfficerUpdateOne struct {
	config
	hooks    []Hook
	mutation *OfficerMutation
}

// SetOfficerEmail sets the officer_email field.
func (ouo *OfficerUpdateOne) SetOfficerEmail(s string) *OfficerUpdateOne {
	ouo.mutation.SetOfficerEmail(s)
	return ouo
}

// SetOfficerName sets the officer_name field.
func (ouo *OfficerUpdateOne) SetOfficerName(s string) *OfficerUpdateOne {
	ouo.mutation.SetOfficerName(s)
	return ouo
}

// SetOfficerPassword sets the officer_password field.
func (ouo *OfficerUpdateOne) SetOfficerPassword(s string) *OfficerUpdateOne {
	ouo.mutation.SetOfficerPassword(s)
	return ouo
}

// AddOfficerProductIDs adds the officer_product edge to Product by ids.
func (ouo *OfficerUpdateOne) AddOfficerProductIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.AddOfficerProductIDs(ids...)
	return ouo
}

// AddOfficerProduct adds the officer_product edges to Product.
func (ouo *OfficerUpdateOne) AddOfficerProduct(p ...*Product) *OfficerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddOfficerProductIDs(ids...)
}

// AddOfficerInsuranceIDs adds the officer_insurance edge to Insurance by ids.
func (ouo *OfficerUpdateOne) AddOfficerInsuranceIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.AddOfficerInsuranceIDs(ids...)
	return ouo
}

// AddOfficerInsurance adds the officer_insurance edges to Insurance.
func (ouo *OfficerUpdateOne) AddOfficerInsurance(i ...*Insurance) *OfficerUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddOfficerInsuranceIDs(ids...)
}

// AddOfficerInquiryIDs adds the officer_inquiry edge to Inquiry by ids.
func (ouo *OfficerUpdateOne) AddOfficerInquiryIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.AddOfficerInquiryIDs(ids...)
	return ouo
}

// AddOfficerInquiry adds the officer_inquiry edges to Inquiry.
func (ouo *OfficerUpdateOne) AddOfficerInquiry(i ...*Inquiry) *OfficerUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddOfficerInquiryIDs(ids...)
}

// AddOfficerPaybackIDs adds the officer_payback edge to Payback by ids.
func (ouo *OfficerUpdateOne) AddOfficerPaybackIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.AddOfficerPaybackIDs(ids...)
	return ouo
}

// AddOfficerPayback adds the officer_payback edges to Payback.
func (ouo *OfficerUpdateOne) AddOfficerPayback(p ...*Payback) *OfficerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddOfficerPaybackIDs(ids...)
}

// AddOfficerRecordinsuranceIDs adds the officer_recordinsurance edge to Recordinsurance by ids.
func (ouo *OfficerUpdateOne) AddOfficerRecordinsuranceIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.AddOfficerRecordinsuranceIDs(ids...)
	return ouo
}

// AddOfficerRecordinsurance adds the officer_recordinsurance edges to Recordinsurance.
func (ouo *OfficerUpdateOne) AddOfficerRecordinsurance(r ...*Recordinsurance) *OfficerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddOfficerRecordinsuranceIDs(ids...)
}

// Mutation returns the OfficerMutation object of the builder.
func (ouo *OfficerUpdateOne) Mutation() *OfficerMutation {
	return ouo.mutation
}

// RemoveOfficerProductIDs removes the officer_product edge to Product by ids.
func (ouo *OfficerUpdateOne) RemoveOfficerProductIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.RemoveOfficerProductIDs(ids...)
	return ouo
}

// RemoveOfficerProduct removes officer_product edges to Product.
func (ouo *OfficerUpdateOne) RemoveOfficerProduct(p ...*Product) *OfficerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemoveOfficerProductIDs(ids...)
}

// RemoveOfficerInsuranceIDs removes the officer_insurance edge to Insurance by ids.
func (ouo *OfficerUpdateOne) RemoveOfficerInsuranceIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.RemoveOfficerInsuranceIDs(ids...)
	return ouo
}

// RemoveOfficerInsurance removes officer_insurance edges to Insurance.
func (ouo *OfficerUpdateOne) RemoveOfficerInsurance(i ...*Insurance) *OfficerUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveOfficerInsuranceIDs(ids...)
}

// RemoveOfficerInquiryIDs removes the officer_inquiry edge to Inquiry by ids.
func (ouo *OfficerUpdateOne) RemoveOfficerInquiryIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.RemoveOfficerInquiryIDs(ids...)
	return ouo
}

// RemoveOfficerInquiry removes officer_inquiry edges to Inquiry.
func (ouo *OfficerUpdateOne) RemoveOfficerInquiry(i ...*Inquiry) *OfficerUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveOfficerInquiryIDs(ids...)
}

// RemoveOfficerPaybackIDs removes the officer_payback edge to Payback by ids.
func (ouo *OfficerUpdateOne) RemoveOfficerPaybackIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.RemoveOfficerPaybackIDs(ids...)
	return ouo
}

// RemoveOfficerPayback removes officer_payback edges to Payback.
func (ouo *OfficerUpdateOne) RemoveOfficerPayback(p ...*Payback) *OfficerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemoveOfficerPaybackIDs(ids...)
}

// RemoveOfficerRecordinsuranceIDs removes the officer_recordinsurance edge to Recordinsurance by ids.
func (ouo *OfficerUpdateOne) RemoveOfficerRecordinsuranceIDs(ids ...int) *OfficerUpdateOne {
	ouo.mutation.RemoveOfficerRecordinsuranceIDs(ids...)
	return ouo
}

// RemoveOfficerRecordinsurance removes officer_recordinsurance edges to Recordinsurance.
func (ouo *OfficerUpdateOne) RemoveOfficerRecordinsurance(r ...*Recordinsurance) *OfficerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveOfficerRecordinsuranceIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ouo *OfficerUpdateOne) Save(ctx context.Context) (*Officer, error) {
	if v, ok := ouo.mutation.OfficerEmail(); ok {
		if err := officer.OfficerEmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "officer_email", err: fmt.Errorf("ent: validator failed for field \"officer_email\": %w", err)}
		}
	}
	if v, ok := ouo.mutation.OfficerName(); ok {
		if err := officer.OfficerNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "officer_name", err: fmt.Errorf("ent: validator failed for field \"officer_name\": %w", err)}
		}
	}
	if v, ok := ouo.mutation.OfficerPassword(); ok {
		if err := officer.OfficerPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "officer_password", err: fmt.Errorf("ent: validator failed for field \"officer_password\": %w", err)}
		}
	}

	var (
		err  error
		node *Officer
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OfficerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OfficerUpdateOne) SaveX(ctx context.Context) *Officer {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OfficerUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OfficerUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OfficerUpdateOne) sqlSave(ctx context.Context) (o *Officer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   officer.Table,
			Columns: officer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: officer.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Officer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.OfficerEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerEmail,
		})
	}
	if value, ok := ouo.mutation.OfficerName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerName,
		})
	}
	if value, ok := ouo.mutation.OfficerPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: officer.FieldOfficerPassword,
		})
	}
	if nodes := ouo.mutation.RemovedOfficerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerProductTable,
			Columns: []string{officer.OfficerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OfficerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerProductTable,
			Columns: []string{officer.OfficerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ouo.mutation.RemovedOfficerInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInsuranceTable,
			Columns: []string{officer.OfficerInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OfficerInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInsuranceTable,
			Columns: []string{officer.OfficerInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ouo.mutation.RemovedOfficerInquiryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInquiryTable,
			Columns: []string{officer.OfficerInquiryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inquiry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OfficerInquiryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerInquiryTable,
			Columns: []string{officer.OfficerInquiryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inquiry.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ouo.mutation.RemovedOfficerPaybackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerPaybackTable,
			Columns: []string{officer.OfficerPaybackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OfficerPaybackIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerPaybackTable,
			Columns: []string{officer.OfficerPaybackColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payback.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ouo.mutation.RemovedOfficerRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerRecordinsuranceTable,
			Columns: []string{officer.OfficerRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OfficerRecordinsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   officer.OfficerRecordinsuranceTable,
			Columns: []string{officer.OfficerRecordinsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordinsurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Officer{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{officer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
