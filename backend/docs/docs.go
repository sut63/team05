// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/genders": {
            "get": {
                "description": "list gender entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List gender entities",
                "operationId": "list-gender",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Gender"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create gender",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create gender",
                "operationId": "create-gender",
                "parameters": [
                    {
                        "description": "Gender entity",
                        "name": "gender",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ent.Gender"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Gender"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/genders/{id}": {
            "get": {
                "description": "get gender by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a gender entity by ID",
                "operationId": "get-gender",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gender ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Gender"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update gender by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a gender entity by ID",
                "operationId": "update-gender",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gender ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gender entity",
                        "name": "gender",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ent.Gender"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Gender"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get gender by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a gender entity by ID",
                "operationId": "delete-gender",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gender ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/groupofages": {
            "get": {
                "description": "list groupofage entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List groupofage entities",
                "operationId": "list-groupofage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.GroupOfAge"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create groupofage",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create groupofage",
                "operationId": "create-groupofage",
                "parameters": [
                    {
                        "description": "GroupOfAge entity",
                        "name": "groupofage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ent.GroupOfAge"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.GroupOfAge"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/groupofages/{id}": {
            "get": {
                "description": "get groupofage by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a groupofage entity by ID",
                "operationId": "get-groupofage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupOfAge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.GroupOfAge"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update groupofage by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a groupofage entity by ID",
                "operationId": "update-groupofage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupOfAge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "GroupOfAge entity",
                        "name": "groupofage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ent.GroupOfAge"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.GroupOfAge"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get groupofage by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a groupofage entity by ID",
                "operationId": "delete-groupofage",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupOfAge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/officers": {
            "get": {
                "description": "list officer entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List officer entities",
                "operationId": "list-officer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Officer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create officer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create officer",
                "operationId": "create-officer",
                "parameters": [
                    {
                        "description": "Officer entity",
                        "name": "officer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ent.Officer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Officer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/officers/{id}": {
            "get": {
                "description": "get officer by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a officer entity by ID",
                "operationId": "get-officer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Officer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Officer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update officer by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a officer entity by ID",
                "operationId": "update-officer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Officer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Officer entity",
                        "name": "officer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ent.Officer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Officer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get officer by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a officer entity by ID",
                "operationId": "delete-officer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Officer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "list product entities",
                "produces": [
                    "application/json"
                ],
                "summary": "List product entities",
                "operationId": "list-product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "post": {
                "description": "Create product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create product",
                "operationId": "create-product",
                "parameters": [
                    {
                        "description": "Product entity",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "get product by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Get a product entity by ID",
                "operationId": "get-product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "description": "update product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a product entity by ID",
                "operationId": "update-product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product entity",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ent.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "description": "get product by ID",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a product entity by ID",
                "operationId": "delete-product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.Product": {
            "type": "object",
            "properties": {
                "gender": {
                    "type": "integer"
                },
                "groupOfAge": {
                    "type": "integer"
                },
                "officer": {
                    "type": "integer"
                },
                "productName": {
                    "type": "string"
                },
                "productPaymentOfYear": {
                    "type": "number"
                },
                "productPrice": {
                    "type": "integer"
                },
                "productTime": {
                    "type": "integer"
                }
            }
        },
        "ent.Gender": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the GenderQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.GenderEdges"
                },
                "gender_name": {
                    "description": "GenderName holds the value of the \"gender_name\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                }
            }
        },
        "ent.GenderEdges": {
            "type": "object",
            "properties": {
                "genders": {
                    "description": "Genders holds the value of the genders edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Product"
                    }
                }
            }
        },
        "ent.GroupOfAge": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the GroupOfAgeQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.GroupOfAgeEdges"
                },
                "group_of_age_age": {
                    "description": "GroupOfAgeAge holds the value of the \"group_of_age_age\" field.",
                    "type": "string"
                },
                "group_of_age_name": {
                    "description": "GroupOfAgeName holds the value of the \"group_of_age_name\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                }
            }
        },
        "ent.GroupOfAgeEdges": {
            "type": "object",
            "properties": {
                "gropages": {
                    "description": "Gropages holds the value of the gropages edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Product"
                    }
                }
            }
        },
        "ent.Hospital": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the HospitalQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.HospitalEdges"
                },
                "hospital_name": {
                    "description": "HospitalName holds the value of the \"hospital_name\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                }
            }
        },
        "ent.HospitalEdges": {
            "type": "object",
            "properties": {
                "hospitalInsurance": {
                    "description": "HospitalInsurance holds the value of the hospital_insurance edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Insurance"
                    }
                }
            }
        },
        "ent.Insurance": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the InsuranceQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.InsuranceEdges"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "insurance_address": {
                    "description": "InsuranceAddress holds the value of the \"insurance_address\" field.",
                    "type": "string"
                },
                "insurance_insurer": {
                    "description": "InsuranceInsurer holds the value of the \"insurance_insurer\" field.",
                    "type": "string"
                },
                "insurance_time_buy": {
                    "description": "InsuranceTimeBuy holds the value of the \"insurance_time_buy\" field.",
                    "type": "string"
                },
                "insurance_time_firstpay": {
                    "description": "InsuranceTimeFirstpay holds the value of the \"insurance_time_firstpay\" field.",
                    "type": "string"
                }
            }
        },
        "ent.InsuranceEdges": {
            "type": "object",
            "properties": {
                "hospital": {
                    "description": "Hospital holds the value of the Hospital edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Hospital"
                },
                "member": {
                    "description": "Member holds the value of the Member edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Member"
                },
                "officer": {
                    "description": "Officer holds the value of the Officer edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Officer"
                },
                "product": {
                    "description": "Product holds the value of the Product edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Product"
                }
            }
        },
        "ent.Member": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the MemberQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.MemberEdges"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "member_email": {
                    "description": "MemberEmail holds the value of the \"member_email\" field.",
                    "type": "string"
                },
                "member_name": {
                    "description": "MemberName holds the value of the \"member_name\" field.",
                    "type": "string"
                },
                "member_password": {
                    "description": "MemberPassword holds the value of the \"member_password\" field.",
                    "type": "string"
                }
            }
        },
        "ent.MemberEdges": {
            "type": "object",
            "properties": {
                "memberInsurance": {
                    "description": "MemberInsurance holds the value of the member_insurance edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Insurance"
                    }
                }
            }
        },
        "ent.Officer": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the OfficerQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.OfficerEdges"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "officer_email": {
                    "description": "OfficerEmail holds the value of the \"officer_email\" field.",
                    "type": "string"
                },
                "officer_name": {
                    "description": "OfficerName holds the value of the \"officer_name\" field.",
                    "type": "string"
                },
                "officer_password": {
                    "description": "OfficerPassword holds the value of the \"officer_password\" field.",
                    "type": "string"
                }
            }
        },
        "ent.OfficerEdges": {
            "type": "object",
            "properties": {
                "officerInsurance": {
                    "description": "OfficerInsurance holds the value of the officer_insurance edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Insurance"
                    }
                },
                "officers": {
                    "description": "Officers holds the value of the officers edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Product"
                    }
                }
            }
        },
        "ent.Product": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the ProductQuery when eager-loading is set.",
                    "type": "object",
                    "$ref": "#/definitions/ent.ProductEdges"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "product_name": {
                    "description": "ProductName holds the value of the \"product_name\" field.",
                    "type": "string"
                },
                "product_payment_of_year": {
                    "description": "ProductPaymentOfYear holds the value of the \"product_payment_of_year\" field.",
                    "type": "number"
                },
                "product_price": {
                    "description": "ProductPrice holds the value of the \"product_price\" field.",
                    "type": "integer"
                },
                "product_time": {
                    "description": "ProductTime holds the value of the \"product_time\" field.",
                    "type": "integer"
                }
            }
        },
        "ent.ProductEdges": {
            "type": "object",
            "properties": {
                "gender": {
                    "description": "Gender holds the value of the Gender edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Gender"
                },
                "groupOfAge": {
                    "description": "GroupOfAge holds the value of the Group_Of_Age edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.GroupOfAge"
                },
                "officer": {
                    "description": "Officer holds the value of the Officer edge.",
                    "type": "object",
                    "$ref": "#/definitions/ent.Officer"
                },
                "productInsurance": {
                    "description": "ProductInsurance holds the value of the product_insurance edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Insurance"
                    }
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": true
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "authorizationUrl": "",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "authorizationUrl": "",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "SUT SA Example API Playlist Vidoe",
	Description: "This is a sample server for SUT SE 2563",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
