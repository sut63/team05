basePath: /api/v1
definitions:
  controllers.Insurance:
    properties:
      hospitalID:
        type: integer
      insuranceAddress:
        type: string
      insuranceInsurer:
        type: string
      insuranceTimeBuy:
        type: string
      insuranceTimeFirstpay:
        type: string
      memberID:
        type: integer
      officerID:
        type: integer
      productID:
        type: integer
    type: object
  controllers.Payment:
    properties:
      accountName:
        type: string
      accountNumber:
        type: string
      bankID:
        type: integer
      insuranceID:
        type: integer
      memberID:
        type: integer
      moneytransferID:
        type: integer
      transferTime:
        type: string
    type: object
  controllers.Product:
    properties:
      genderID:
        type: integer
      groupOfAge:
        type: integer
      officer:
        type: integer
      productName:
        type: string
      productPaymentOfYear:
        type: number
      productPrice:
        type: integer
      productTime:
        type: integer
    type: object
  ent.Bank:
    properties:
      bank_type:
        description: BankType holds the value of the "bank_type" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BankEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BankQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BankEdges:
    properties:
      bankPayment:
        description: BankPayment holds the value of the bank_payment edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
    type: object
  ent.Category:
    properties:
      category_name:
        description: CategoryName holds the value of the "category_name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CategoryEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CategoryQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.CategoryEdges:
    properties:
      categoryInquiry:
        description: CategoryInquiry holds the value of the category_inquiry edge.
        items:
          $ref: '#/definitions/ent.Inquiry'
        type: array
    type: object
  ent.Gender:
    properties:
      edges:
        $ref: '#/definitions/ent.GenderEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the GenderQuery when eager-loading is set.
        type: object
      gender_name:
        description: GenderName holds the value of the "gender_name" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.GenderEdges:
    properties:
      genders:
        description: Genders holds the value of the genders edge.
        items:
          $ref: '#/definitions/ent.Product'
        type: array
    type: object
  ent.GroupOfAge:
    properties:
      edges:
        $ref: '#/definitions/ent.GroupOfAgeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the GroupOfAgeQuery when eager-loading is set.
        type: object
      group_of_age_age:
        description: GroupOfAgeAge holds the value of the "group_of_age_age" field.
        type: string
      group_of_age_name:
        description: GroupOfAgeName holds the value of the "group_of_age_name" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.GroupOfAgeEdges:
    properties:
      groupageProduct:
        description: GroupageProduct holds the value of the groupage_product edge.
        items:
          $ref: '#/definitions/ent.Product'
        type: array
    type: object
  ent.Hospital:
    properties:
      edges:
        $ref: '#/definitions/ent.HospitalEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the HospitalQuery when eager-loading is set.
        type: object
      hospital_name:
        description: HospitalName holds the value of the "hospital_name" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.HospitalEdges:
    properties:
      hospitalInsurance:
        description: HospitalInsurance holds the value of the hospital_insurance edge.
        items:
          $ref: '#/definitions/ent.Insurance'
        type: array
    type: object
  ent.Inquiry:
    properties:
      Inquiry_inguiry_messages:
        description: InquiryInguiryMessages holds the value of the "Inquiry_inguiry_messages"
          field.
        type: string
      Inquiry_time_messages:
        description: InquiryTimeMessages holds the value of the "Inquiry_time_messages"
          field.
        type: string
      edges:
        $ref: '#/definitions/ent.InquiryEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the InquiryQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.InquiryEdges:
    properties:
      category:
        $ref: '#/definitions/ent.Category'
        description: Category holds the value of the Category edge.
        type: object
      member:
        $ref: '#/definitions/ent.Member'
        description: Member holds the value of the Member edge.
        type: object
      officer:
        $ref: '#/definitions/ent.Officer'
        description: Officer holds the value of the Officer edge.
        type: object
      product:
        $ref: '#/definitions/ent.Product'
        description: Product holds the value of the Product edge.
        type: object
    type: object
  ent.Insurance:
    properties:
      edges:
        $ref: '#/definitions/ent.InsuranceEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the InsuranceQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      insurance_address:
        description: InsuranceAddress holds the value of the "insurance_address" field.
        type: string
      insurance_insurer:
        description: InsuranceInsurer holds the value of the "insurance_insurer" field.
        type: string
      insurance_time_buy:
        description: InsuranceTimeBuy holds the value of the "insurance_time_buy"
          field.
        type: string
      insurance_time_firstpay:
        description: InsuranceTimeFirstpay holds the value of the "insurance_time_firstpay"
          field.
        type: string
    type: object
  ent.InsuranceEdges:
    properties:
      hospital:
        $ref: '#/definitions/ent.Hospital'
        description: Hospital holds the value of the Hospital edge.
        type: object
      insurancePayment:
        description: InsurancePayment holds the value of the insurance_payment edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
      member:
        $ref: '#/definitions/ent.Member'
        description: Member holds the value of the Member edge.
        type: object
      officer:
        $ref: '#/definitions/ent.Officer'
        description: Officer holds the value of the Officer edge.
        type: object
      product:
        $ref: '#/definitions/ent.Product'
        description: Product holds the value of the Product edge.
        type: object
    type: object
  ent.Member:
    properties:
      edges:
        $ref: '#/definitions/ent.MemberEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MemberQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      member_email:
        description: MemberEmail holds the value of the "member_email" field.
        type: string
      member_name:
        description: MemberName holds the value of the "member_name" field.
        type: string
      member_password:
        description: MemberPassword holds the value of the "member_password" field.
        type: string
    type: object
  ent.MemberEdges:
    properties:
      memberInquiry:
        description: MemberInquiry holds the value of the member_inquiry edge.
        items:
          $ref: '#/definitions/ent.Inquiry'
        type: array
      memberInsurance:
        description: MemberInsurance holds the value of the member_insurance edge.
        items:
          $ref: '#/definitions/ent.Insurance'
        type: array
      memberPayment:
        description: MemberPayment holds the value of the member_payment edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
    type: object
  ent.MoneyTransfer:
    properties:
      edges:
        $ref: '#/definitions/ent.MoneyTransferEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the MoneyTransferQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      moneytransfer_type:
        description: MoneytransferType holds the value of the "moneytransfer_type"
          field.
        type: string
    type: object
  ent.MoneyTransferEdges:
    properties:
      moneytransferPayment:
        description: MoneytransferPayment holds the value of the moneytransfer_payment
          edge.
        items:
          $ref: '#/definitions/ent.Payment'
        type: array
    type: object
  ent.Officer:
    properties:
      edges:
        $ref: '#/definitions/ent.OfficerEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the OfficerQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      officer_email:
        description: OfficerEmail holds the value of the "officer_email" field.
        type: string
      officer_name:
        description: OfficerName holds the value of the "officer_name" field.
        type: string
      officer_password:
        description: OfficerPassword holds the value of the "officer_password" field.
        type: string
    type: object
  ent.OfficerEdges:
    properties:
      officerInquiry:
        description: OfficerInquiry holds the value of the officer_inquiry edge.
        items:
          $ref: '#/definitions/ent.Inquiry'
        type: array
      officerInsurance:
        description: OfficerInsurance holds the value of the officer_insurance edge.
        items:
          $ref: '#/definitions/ent.Insurance'
        type: array
      officerProduct:
        description: OfficerProduct holds the value of the officer_product edge.
        items:
          $ref: '#/definitions/ent.Product'
        type: array
    type: object
  ent.Payment:
    properties:
      account_name:
        description: AccountName holds the value of the "account_name" field.
        type: string
      account_number:
        description: AccountNumber holds the value of the "account_number" field.
        type: string
      edges:
        $ref: '#/definitions/ent.PaymentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PaymentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      transfer_time:
        description: TransferTime holds the value of the "transfer_time" field.
        type: string
    type: object
  ent.PaymentEdges:
    properties:
      bank:
        $ref: '#/definitions/ent.Bank'
        description: Bank holds the value of the Bank edge.
        type: object
      insurance:
        $ref: '#/definitions/ent.Insurance'
        description: Insurance holds the value of the Insurance edge.
        type: object
      member:
        $ref: '#/definitions/ent.Member'
        description: Member holds the value of the Member edge.
        type: object
      moneyTransfer:
        $ref: '#/definitions/ent.MoneyTransfer'
        description: MoneyTransfer holds the value of the MoneyTransfer edge.
        type: object
    type: object
  ent.Product:
    properties:
      edges:
        $ref: '#/definitions/ent.ProductEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProductQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      product_name:
        description: ProductName holds the value of the "product_name" field.
        type: string
      product_payment_of_year:
        description: ProductPaymentOfYear holds the value of the "product_payment_of_year"
          field.
        type: number
      product_price:
        description: ProductPrice holds the value of the "product_price" field.
        type: integer
      product_time:
        description: ProductTime holds the value of the "product_time" field.
        type: integer
    type: object
  ent.ProductEdges:
    properties:
      productGender:
        $ref: '#/definitions/ent.Gender'
        description: ProductGender holds the value of the product_gender edge.
        type: object
      productGroupage:
        $ref: '#/definitions/ent.GroupOfAge'
        description: ProductGroupage holds the value of the product_groupage edge.
        type: object
      productInquiry:
        description: ProductInquiry holds the value of the product_inquiry edge.
        items:
          $ref: '#/definitions/ent.Inquiry'
        type: array
      productInsurance:
        description: ProductInsurance holds the value of the product_insurance edge.
        items:
          $ref: '#/definitions/ent.Insurance'
        type: array
      productOfficer:
        $ref: '#/definitions/ent.Officer'
        description: ProductOfficer holds the value of the product_officer edge.
        type: object
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API Playlist Vidoe
  version: "1.0"
paths:
  /banks:
    get:
      description: list Bank entities
      operationId: list-Bank
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Bank'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Bank entities
    post:
      consumes:
      - application/json
      description: Create Bank
      operationId: create-Bank
      parameters:
      - description: Bank entity
        in: body
        name: Bank
        required: true
        schema:
          $ref: '#/definitions/ent.Bank'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bank'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Bank
  /banks/{id}:
    delete:
      description: get Bank by ID
      operationId: delete-Bank
      parameters:
      - description: Bank ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Bank entity by ID
    get:
      description: get Bank by ID
      operationId: get-Bank
      parameters:
      - description: Bank ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bank'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a Bank entity by ID
    put:
      consumes:
      - application/json
      description: update Bank by ID
      operationId: update-Bank
      parameters:
      - description: Bank ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bank entity
        in: body
        name: Bank
        required: true
        schema:
          $ref: '#/definitions/ent.Bank'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bank'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a Bank entity by ID
  /genders:
    get:
      description: list gender entities
      operationId: list-gender
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Gender'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List gender entities
    post:
      consumes:
      - application/json
      description: Create gender
      operationId: create-gender
      parameters:
      - description: Gender entity
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/ent.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create gender
  /genders/{id}:
    delete:
      description: get gender by ID
      operationId: delete-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a gender entity by ID
    get:
      description: get gender by ID
      operationId: get-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a gender entity by ID
    put:
      consumes:
      - application/json
      description: update gender by ID
      operationId: update-gender
      parameters:
      - description: Gender ID
        in: path
        name: id
        required: true
        type: integer
      - description: Gender entity
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/ent.Gender'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Gender'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a gender entity by ID
  /groupofages:
    get:
      description: list groupofage entities
      operationId: list-groupofage
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.GroupOfAge'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List groupofage entities
    post:
      consumes:
      - application/json
      description: Create groupofage
      operationId: create-groupofage
      parameters:
      - description: GroupOfAge entity
        in: body
        name: groupofage
        required: true
        schema:
          $ref: '#/definitions/ent.GroupOfAge'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.GroupOfAge'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create groupofage
  /groupofages/{id}:
    delete:
      description: get groupofage by ID
      operationId: delete-groupofage
      parameters:
      - description: GroupOfAge ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a groupofage entity by ID
    get:
      description: get groupofage by ID
      operationId: get-groupofage
      parameters:
      - description: GroupOfAge ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.GroupOfAge'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a groupofage entity by ID
    put:
      consumes:
      - application/json
      description: update groupofage by ID
      operationId: update-groupofage
      parameters:
      - description: GroupOfAge ID
        in: path
        name: id
        required: true
        type: integer
      - description: GroupOfAge entity
        in: body
        name: groupofage
        required: true
        schema:
          $ref: '#/definitions/ent.GroupOfAge'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.GroupOfAge'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a groupofage entity by ID
  /hospitals:
    get:
      description: list hospital entities
      operationId: list-hospital
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Hospital'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List hospital entities
    post:
      consumes:
      - application/json
      description: Create hospital
      operationId: create-hospital
      parameters:
      - description: Hospital entity
        in: body
        name: Hospital
        required: true
        schema:
          $ref: '#/definitions/ent.Hospital'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Hospital'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create hospital
  /hospitals/{id}:
    delete:
      description: get hospital by ID
      operationId: delete-hospital
      parameters:
      - description: Hospital ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a hospital entity by ID
    get:
      description: get hospital by ID
      operationId: get-hospital
      parameters:
      - description: Hospital ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Hospital'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a hospital entity by ID
    put:
      consumes:
      - application/json
      description: update hospital by ID
      operationId: update-hospital
      parameters:
      - description: Hospital ID
        in: path
        name: id
        required: true
        type: integer
      - description: Hospital entity
        in: body
        name: hospital
        required: true
        schema:
          $ref: '#/definitions/ent.Hospital'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Hospital'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a hospital entity by ID
  /insurances:
    get:
      description: list insurance entities
      operationId: list-insurance
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Insurance'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List insurance entities
    post:
      consumes:
      - application/json
      description: Create insurance
      operationId: create-insurance
      parameters:
      - description: Insurance entity
        in: body
        name: insurance
        required: true
        schema:
          $ref: '#/definitions/controllers.Insurance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Insurance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create insurance
  /insurances/{id}:
    delete:
      description: get insurance by ID
      operationId: delete-insurance
      parameters:
      - description: Insurance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a insurance entity by ID
  /members:
    get:
      description: list member entities
      operationId: list-member
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Member'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List member entities
    post:
      consumes:
      - application/json
      description: Create member
      operationId: create-member
      parameters:
      - description: Member entity
        in: body
        name: Member
        required: true
        schema:
          $ref: '#/definitions/ent.Member'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Member'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create member
  /members/{id}:
    delete:
      description: get member by ID
      operationId: delete-member
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a member entity by ID
    get:
      description: get member by ID
      operationId: get-member
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Member'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a member entity by ID
    put:
      consumes:
      - application/json
      description: update member by ID
      operationId: update-member
      parameters:
      - description: Member ID
        in: path
        name: id
        required: true
        type: integer
      - description: Member entity
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/ent.Member'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Member'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a member entity by ID
  /moneyTransfers:
    get:
      description: list MoneyTransfer entities
      operationId: list-MoneyTransfer
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.MoneyTransfer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List MoneyTransfer entities
    post:
      consumes:
      - application/json
      description: Create MoneyTransfer
      operationId: create-MoneyTransfer
      parameters:
      - description: MoneyTransfer entity
        in: body
        name: MoneyTransfer
        required: true
        schema:
          $ref: '#/definitions/ent.MoneyTransfer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MoneyTransfer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create MoneyTransfer
  /moneyTransfers/{id}:
    delete:
      description: get MoneyTransfer by ID
      operationId: delete-MoneyTransfer
      parameters:
      - description: MoneyTransfer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a MoneyTransfer entity by ID
    get:
      description: get MoneyTransfer by ID
      operationId: get-MoneyTransfer
      parameters:
      - description: MoneyTransfer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MoneyTransfer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a MoneyTransfer entity by ID
    put:
      consumes:
      - application/json
      description: update MoneyTransfer by ID
      operationId: update-MoneyTransfer
      parameters:
      - description: MoneyTransfer ID
        in: path
        name: id
        required: true
        type: integer
      - description: MoneyTransfer entity
        in: body
        name: MoneyTransfer
        required: true
        schema:
          $ref: '#/definitions/ent.MoneyTransfer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MoneyTransfer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a MoneyTransfer entity by ID
  /officers:
    get:
      description: list officer entities
      operationId: list-officer
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Officer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List officer entities
    post:
      consumes:
      - application/json
      description: Create officer
      operationId: create-officer
      parameters:
      - description: Officer entity
        in: body
        name: officer
        required: true
        schema:
          $ref: '#/definitions/ent.Officer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Officer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create officer
  /officers/{id}:
    delete:
      description: get officer by ID
      operationId: delete-officer
      parameters:
      - description: Officer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a officer entity by ID
    get:
      description: get officer by ID
      operationId: get-officer
      parameters:
      - description: Officer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Officer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a officer entity by ID
    put:
      consumes:
      - application/json
      description: update officer by ID
      operationId: update-officer
      parameters:
      - description: Officer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Officer entity
        in: body
        name: officer
        required: true
        schema:
          $ref: '#/definitions/ent.Officer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Officer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a officer entity by ID
  /payments:
    get:
      description: list Payment entities
      operationId: list-Payment
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Payment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Payment entities
    post:
      consumes:
      - application/json
      description: Create Payment
      operationId: create-Payment
      parameters:
      - description: Payment entity
        in: body
        name: Payment
        required: true
        schema:
          $ref: '#/definitions/controllers.Payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Payment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create Payment
  /payments/{id}:
    delete:
      description: get Payment by ID
      operationId: delete-Payment
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Payment entity by ID
  /products:
    get:
      description: list product entities
      operationId: list-product
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List product entities
    post:
      consumes:
      - application/json
      description: Create product
      operationId: create-product
      parameters:
      - description: Product entity
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/controllers.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create product
  /products/{id}:
    delete:
      description: get product by ID
      operationId: delete-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a product entity by ID
    get:
      description: get product by ID
      operationId: get-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a product entity by ID
    put:
      consumes:
      - application/json
      description: update product by ID
      operationId: update-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product entity
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/ent.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a product entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    authorizationUrl: ""
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
